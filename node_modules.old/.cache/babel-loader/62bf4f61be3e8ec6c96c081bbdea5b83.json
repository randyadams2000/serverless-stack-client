{"ast":null,"code":"import { __assign, __awaiter, __generator, __values } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport function serializeAws_restJson1_1DeleteLexiconCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"\";\n      resolvedPath = \"/v1/lexicons/{Name}\";\n\n      if (input.Name !== undefined) {\n        labelValue = input.Name;\n\n        if (labelValue.length <= 0) {\n          throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n\n        resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n      } else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n      }\n\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"DELETE\",\n        headers: headers,\n        path: resolvedPath,\n        body: body\n      }))];\n    });\n  });\n}\nexport function serializeAws_restJson1_1DescribeVoicesCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, query, body;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"\";\n      resolvedPath = \"/v1/voices\";\n      query = {};\n\n      if (input.Engine !== undefined) {\n        query[\"Engine\"] = input.Engine;\n      }\n\n      if (input.IncludeAdditionalLanguageCodes !== undefined) {\n        query[\"IncludeAdditionalLanguageCodes\"] = input.IncludeAdditionalLanguageCodes.toString();\n      }\n\n      if (input.LanguageCode !== undefined) {\n        query[\"LanguageCode\"] = input.LanguageCode;\n      }\n\n      if (input.NextToken !== undefined) {\n        query[\"NextToken\"] = input.NextToken;\n      }\n\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"GET\",\n        headers: headers,\n        path: resolvedPath,\n        query: query,\n        body: body\n      }))];\n    });\n  });\n}\nexport function serializeAws_restJson1_1GetLexiconCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"\";\n      resolvedPath = \"/v1/lexicons/{Name}\";\n\n      if (input.Name !== undefined) {\n        labelValue = input.Name;\n\n        if (labelValue.length <= 0) {\n          throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n\n        resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n      } else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n      }\n\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"GET\",\n        headers: headers,\n        path: resolvedPath,\n        body: body\n      }))];\n    });\n  });\n}\nexport function serializeAws_restJson1_1GetSpeechSynthesisTaskCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"\";\n      resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n\n      if (input.TaskId !== undefined) {\n        labelValue = input.TaskId;\n\n        if (labelValue.length <= 0) {\n          throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n        }\n\n        resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n      } else {\n        throw new Error(\"No value provided for input HTTP label: TaskId.\");\n      }\n\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"GET\",\n        headers: headers,\n        path: resolvedPath,\n        body: body\n      }))];\n    });\n  });\n}\nexport function serializeAws_restJson1_1ListLexiconsCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, query, body;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"\";\n      resolvedPath = \"/v1/lexicons\";\n      query = {};\n\n      if (input.NextToken !== undefined) {\n        query[\"NextToken\"] = input.NextToken;\n      }\n\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"GET\",\n        headers: headers,\n        path: resolvedPath,\n        query: query,\n        body: body\n      }))];\n    });\n  });\n}\nexport function serializeAws_restJson1_1ListSpeechSynthesisTasksCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, query, body;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"\";\n      resolvedPath = \"/v1/synthesisTasks\";\n      query = {};\n\n      if (input.MaxResults !== undefined) {\n        query[\"MaxResults\"] = input.MaxResults.toString();\n      }\n\n      if (input.NextToken !== undefined) {\n        query[\"NextToken\"] = input.NextToken;\n      }\n\n      if (input.Status !== undefined) {\n        query[\"Status\"] = input.Status;\n      }\n\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"GET\",\n        headers: headers,\n        path: resolvedPath,\n        query: query,\n        body: body\n      }))];\n    });\n  });\n}\nexport function serializeAws_restJson1_1PutLexiconCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, body, bodyParams;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"application/json\";\n      resolvedPath = \"/v1/lexicons/{Name}\";\n\n      if (input.Name !== undefined) {\n        labelValue = input.Name;\n\n        if (labelValue.length <= 0) {\n          throw new Error(\"Empty value provided for input HTTP label: Name.\");\n        }\n\n        resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n      } else {\n        throw new Error(\"No value provided for input HTTP label: Name.\");\n      }\n\n      bodyParams = {};\n\n      if (input.Content !== undefined) {\n        bodyParams[\"Content\"] = input.Content;\n      }\n\n      body = JSON.stringify(bodyParams);\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"PUT\",\n        headers: headers,\n        path: resolvedPath,\n        body: body\n      }))];\n    });\n  });\n}\nexport function serializeAws_restJson1_1StartSpeechSynthesisTaskCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, body, bodyParams;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"application/json\";\n      resolvedPath = \"/v1/synthesisTasks\";\n      bodyParams = {};\n\n      if (input.Engine !== undefined) {\n        bodyParams[\"Engine\"] = input.Engine;\n      }\n\n      if (input.LanguageCode !== undefined) {\n        bodyParams[\"LanguageCode\"] = input.LanguageCode;\n      }\n\n      if (input.LexiconNames !== undefined) {\n        bodyParams[\"LexiconNames\"] = serializeAws_restJson1_1LexiconNameList(input.LexiconNames, context);\n      }\n\n      if (input.OutputFormat !== undefined) {\n        bodyParams[\"OutputFormat\"] = input.OutputFormat;\n      }\n\n      if (input.OutputS3BucketName !== undefined) {\n        bodyParams[\"OutputS3BucketName\"] = input.OutputS3BucketName;\n      }\n\n      if (input.OutputS3KeyPrefix !== undefined) {\n        bodyParams[\"OutputS3KeyPrefix\"] = input.OutputS3KeyPrefix;\n      }\n\n      if (input.SampleRate !== undefined) {\n        bodyParams[\"SampleRate\"] = input.SampleRate;\n      }\n\n      if (input.SnsTopicArn !== undefined) {\n        bodyParams[\"SnsTopicArn\"] = input.SnsTopicArn;\n      }\n\n      if (input.SpeechMarkTypes !== undefined) {\n        bodyParams[\"SpeechMarkTypes\"] = serializeAws_restJson1_1SpeechMarkTypeList(input.SpeechMarkTypes, context);\n      }\n\n      if (input.Text !== undefined) {\n        bodyParams[\"Text\"] = input.Text;\n      }\n\n      if (input.TextType !== undefined) {\n        bodyParams[\"TextType\"] = input.TextType;\n      }\n\n      if (input.VoiceId !== undefined) {\n        bodyParams[\"VoiceId\"] = input.VoiceId;\n      }\n\n      body = JSON.stringify(bodyParams);\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"POST\",\n        headers: headers,\n        path: resolvedPath,\n        body: body\n      }))];\n    });\n  });\n}\nexport function serializeAws_restJson1_1SynthesizeSpeechCommand(input, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var headers, resolvedPath, body, bodyParams;\n    return __generator(this, function (_a) {\n      headers = {};\n      headers[\"Content-Type\"] = \"application/json\";\n      resolvedPath = \"/v1/speech\";\n      bodyParams = {};\n\n      if (input.Engine !== undefined) {\n        bodyParams[\"Engine\"] = input.Engine;\n      }\n\n      if (input.LanguageCode !== undefined) {\n        bodyParams[\"LanguageCode\"] = input.LanguageCode;\n      }\n\n      if (input.LexiconNames !== undefined) {\n        bodyParams[\"LexiconNames\"] = serializeAws_restJson1_1LexiconNameList(input.LexiconNames, context);\n      }\n\n      if (input.OutputFormat !== undefined) {\n        bodyParams[\"OutputFormat\"] = input.OutputFormat;\n      }\n\n      if (input.SampleRate !== undefined) {\n        bodyParams[\"SampleRate\"] = input.SampleRate;\n      }\n\n      if (input.SpeechMarkTypes !== undefined) {\n        bodyParams[\"SpeechMarkTypes\"] = serializeAws_restJson1_1SpeechMarkTypeList(input.SpeechMarkTypes, context);\n      }\n\n      if (input.Text !== undefined) {\n        bodyParams[\"Text\"] = input.Text;\n      }\n\n      if (input.TextType !== undefined) {\n        bodyParams[\"TextType\"] = input.TextType;\n      }\n\n      if (input.VoiceId !== undefined) {\n        bodyParams[\"VoiceId\"] = input.VoiceId;\n      }\n\n      body = JSON.stringify(bodyParams);\n      return [2\n      /*return*/\n      , new __HttpRequest(__assign(__assign({}, context.endpoint), {\n        protocol: \"https\",\n        method: \"POST\",\n        headers: headers,\n        path: resolvedPath,\n        body: body\n      }))];\n    });\n  });\n}\nexport function deserializeAws_restJson1_1DeleteLexiconCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1DeleteLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"DeleteLexiconOutput\"\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1DeleteLexiconCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nexport function deserializeAws_restJson1_1DescribeVoicesCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1DescribeVoicesCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"DescribeVoicesOutput\",\n            NextToken: undefined,\n            Voices: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          if (data.Voices !== undefined && data.Voices !== null) {\n            contents.Voices = deserializeAws_restJson1_1VoiceList(data.Voices, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1DescribeVoicesCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nexport function deserializeAws_restJson1_1GetLexiconCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1GetLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"GetLexiconOutput\",\n            Lexicon: undefined,\n            LexiconAttributes: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Lexicon !== undefined && data.Lexicon !== null) {\n            contents.Lexicon = deserializeAws_restJson1_1Lexicon(data.Lexicon, context);\n          }\n\n          if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n            contents.LexiconAttributes = deserializeAws_restJson1_1LexiconAttributes(data.LexiconAttributes, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1GetLexiconCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nexport function deserializeAws_restJson1_1GetSpeechSynthesisTaskCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"GetSpeechSynthesisTaskOutput\",\n            SynthesisTask: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1_1SynthesisTask(data.SynthesisTask, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, parsedBody, message;\n\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidTaskIdException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidTaskIdException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"SynthesisTaskNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.parrot.v1#SynthesisTaskNotFoundException\":\n              return [3\n              /*break*/\n              , 6];\n          }\n\n          return [3\n          /*break*/\n          , 8];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidTaskIdExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 6:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_g.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 9];\n\n        case 8:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _g.label = 9;\n\n        case 9:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nexport function deserializeAws_restJson1_1ListLexiconsCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1ListLexiconsCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"ListLexiconsOutput\",\n            Lexicons: undefined,\n            NextToken: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.Lexicons !== undefined && data.Lexicons !== null) {\n            contents.Lexicons = deserializeAws_restJson1_1LexiconDescriptionList(data.Lexicons, context);\n          }\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1ListLexiconsCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nexport function deserializeAws_restJson1_1ListSpeechSynthesisTasksCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"ListSpeechSynthesisTasksOutput\",\n            NextToken: undefined,\n            SynthesisTasks: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.NextToken !== undefined && data.NextToken !== null) {\n            contents.NextToken = data.NextToken;\n          }\n\n          if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n            contents.SynthesisTasks = deserializeAws_restJson1_1SynthesisTasks(data.SynthesisTasks, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n\n    return __generator(this, function (_f) {\n      switch (_f.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidNextTokenException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 4];\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_f.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 7];\n\n        case 6:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _f.label = 7;\n\n        case 7:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nexport function deserializeAws_restJson1_1PutLexiconCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1PutLexiconCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"PutLexiconOutput\"\n          };\n          return [4\n          /*yield*/\n          , collectBody(output.body, context)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1PutLexiconCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n\n    return __generator(this, function (_l) {\n      switch (_l.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _l.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"InvalidLexiconException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#InvalidLexiconException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"LexiconSizeExceededException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#LexiconSizeExceededException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"MaxLexemeLengthExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.parrot.v1#MaxLexemeLengthExceededException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"MaxLexiconsNumberExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.parrot.v1#MaxLexiconsNumberExceededException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"UnsupportedPlsAlphabetException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.parrot.v1#UnsupportedPlsAlphabetException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"UnsupportedPlsLanguageException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.parrot.v1#UnsupportedPlsLanguageException\":\n              return [3\n              /*break*/\n              , 14];\n          }\n\n          return [3\n          /*break*/\n          , 16];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidLexiconExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 6:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 8:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 10:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 12:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 14:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_l.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 17];\n\n        case 16:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _l.label = 17;\n\n        case 17:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nexport function deserializeAws_restJson1_1StartSpeechSynthesisTaskCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 400) {\n            return [2\n            /*return*/\n            , deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError(output, context)];\n          }\n\n          contents = {\n            $metadata: deserializeMetadata(output),\n            __type: \"StartSpeechSynthesisTaskOutput\",\n            SynthesisTask: undefined\n          };\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          data = _a.sent();\n\n          if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n            contents.SynthesisTask = deserializeAws_restJson1_1SynthesisTask(data.SynthesisTask, context);\n          }\n\n          return [2\n          /*return*/\n          , Promise.resolve(contents)];\n      }\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;\n\n    return __generator(this, function (_r) {\n      switch (_r.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _r.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InvalidS3BucketException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#InvalidS3BucketException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InvalidS3KeyException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.parrot.v1#InvalidS3KeyException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.parrot.v1#InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"InvalidSnsTopicArnException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.parrot.v1#InvalidSnsTopicArnException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.parrot.v1#InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.parrot.v1#LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.parrot.v1#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.parrot.v1#MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 20];\n\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"com.amazonaws.parrot.v1#SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 22];\n\n            case \"TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 24];\n\n            case \"com.amazonaws.parrot.v1#TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 24];\n          }\n\n          return [3\n          /*break*/\n          , 26];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidS3BucketExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 6:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidS3KeyExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 8:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 10:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 12:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 14:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 16:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 18:\n          _m = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 20:\n          _o = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 21:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 22:\n          _p = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n\n        case 23:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 24:\n          _q = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 25:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([_r.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 27];\n\n        case 26:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _r.label = 27;\n\n        case 27:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nexport function deserializeAws_restJson1_1SynthesizeSpeechCommand(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 400) {\n        return [2\n        /*return*/\n        , deserializeAws_restJson1_1SynthesizeSpeechCommandError(output, context)];\n      }\n\n      contents = {\n        $metadata: deserializeMetadata(output),\n        __type: \"SynthesizeSpeechOutput\",\n        AudioStream: undefined,\n        ContentType: undefined,\n        RequestCharacters: undefined\n      };\n\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.ContentType = output.headers[\"content-type\"];\n      }\n\n      if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n        contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n      }\n\n      data = output.body;\n      contents.AudioStream = data;\n      return [2\n      /*return*/\n      , Promise.resolve(contents)];\n    });\n  });\n}\n\nfunction deserializeAws_restJson1_1SynthesizeSpeechCommandError(output, context) {\n  return __awaiter(this, void 0, void 0, function () {\n    var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;\n\n    return __generator(this, function (_o) {\n      switch (_o.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _b = {};\n          return [4\n          /*yield*/\n          , parseBody(output.body, context)];\n\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _o.sent(), _b)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _c = errorCode;\n\n          switch (_c) {\n            case \"EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"com.amazonaws.parrot.v1#EngineNotSupportedException\":\n              return [3\n              /*break*/\n              , 2];\n\n            case \"InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"com.amazonaws.parrot.v1#InvalidSampleRateException\":\n              return [3\n              /*break*/\n              , 4];\n\n            case \"InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"com.amazonaws.parrot.v1#InvalidSsmlException\":\n              return [3\n              /*break*/\n              , 6];\n\n            case \"LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"com.amazonaws.parrot.v1#LanguageNotSupportedException\":\n              return [3\n              /*break*/\n              , 8];\n\n            case \"LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"com.amazonaws.parrot.v1#LexiconNotFoundException\":\n              return [3\n              /*break*/\n              , 10];\n\n            case \"MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"com.amazonaws.parrot.v1#MarksNotSupportedForFormatException\":\n              return [3\n              /*break*/\n              , 12];\n\n            case \"ServiceFailureException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"com.amazonaws.parrot.v1#ServiceFailureException\":\n              return [3\n              /*break*/\n              , 14];\n\n            case \"SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"com.amazonaws.parrot.v1#SsmlMarksNotSupportedForTextTypeException\":\n              return [3\n              /*break*/\n              , 16];\n\n            case \"TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 18];\n\n            case \"com.amazonaws.parrot.v1#TextLengthExceededException\":\n              return [3\n              /*break*/\n              , 18];\n          }\n\n          return [3\n          /*break*/\n          , 20];\n\n        case 2:\n          _d = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 4:\n          _e = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 6:\n          _f = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context)];\n\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 8:\n          _g = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 10:\n          _h = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 12:\n          _j = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 14:\n          _k = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 16:\n          _l = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 18:\n          _m = [{}];\n          return [4\n          /*yield*/\n          , deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context)];\n\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_o.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3\n          /*break*/\n          , 21];\n\n        case 20:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _o.label = 21;\n\n        case 21:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2\n          /*return*/\n          , Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n}\n\nvar deserializeAws_restJson1_1EngineNotSupportedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"EngineNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidLexiconExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidLexiconException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidNextTokenExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidNextTokenException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidS3BucketExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3BucketException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidS3KeyExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidS3KeyException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidSampleRateExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSampleRateException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSnsTopicArnException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidSsmlExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidSsmlException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1InvalidTaskIdExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InvalidTaskIdException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LanguageNotSupportedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1LexiconNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LexiconSizeExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MarksNotSupportedForFormatException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexemeLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"MaxLexiconsNumberExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1ServiceFailureExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ServiceFailureException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SsmlMarksNotSupportedForTextTypeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"SynthesisTaskNotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1TextLengthExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"TextLengthExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsAlphabetException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedPlsLanguageException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n\n      return [2\n      /*return*/\n      , contents];\n    });\n  });\n};\n\nvar serializeAws_restJson1_1LexiconNameList = function (input, context) {\n  var e_1, _a;\n\n  var contents = [];\n\n  try {\n    for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {\n      var entry = input_1_1.value;\n      contents.push(entry);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return contents;\n};\n\nvar serializeAws_restJson1_1SpeechMarkTypeList = function (input, context) {\n  var e_2, _a;\n\n  var contents = [];\n\n  try {\n    for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {\n      var entry = input_2_1.value;\n      contents.push(entry);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restJson1_1EngineList = function (output, context) {\n  return (output || []).map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1LanguageCodeList = function (output, context) {\n  return (output || []).map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1Lexicon = function (output, context) {\n  var contents = {\n    __type: \"Lexicon\",\n    Content: undefined,\n    Name: undefined\n  };\n\n  if (output.Content !== undefined && output.Content !== null) {\n    contents.Content = output.Content;\n  }\n\n  if (output.Name !== undefined && output.Name !== null) {\n    contents.Name = output.Name;\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restJson1_1LexiconAttributes = function (output, context) {\n  var contents = {\n    __type: \"LexiconAttributes\",\n    Alphabet: undefined,\n    LanguageCode: undefined,\n    LastModified: undefined,\n    LexemesCount: undefined,\n    LexiconArn: undefined,\n    Size: undefined\n  };\n\n  if (output.Alphabet !== undefined && output.Alphabet !== null) {\n    contents.Alphabet = output.Alphabet;\n  }\n\n  if (output.LanguageCode !== undefined && output.LanguageCode !== null) {\n    contents.LanguageCode = output.LanguageCode;\n  }\n\n  if (output.LastModified !== undefined && output.LastModified !== null) {\n    contents.LastModified = new Date(Math.round(output.LastModified * 1000));\n  }\n\n  if (output.LexemesCount !== undefined && output.LexemesCount !== null) {\n    contents.LexemesCount = output.LexemesCount;\n  }\n\n  if (output.LexiconArn !== undefined && output.LexiconArn !== null) {\n    contents.LexiconArn = output.LexiconArn;\n  }\n\n  if (output.Size !== undefined && output.Size !== null) {\n    contents.Size = output.Size;\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restJson1_1LexiconDescription = function (output, context) {\n  var contents = {\n    __type: \"LexiconDescription\",\n    Attributes: undefined,\n    Name: undefined\n  };\n\n  if (output.Attributes !== undefined && output.Attributes !== null) {\n    contents.Attributes = deserializeAws_restJson1_1LexiconAttributes(output.Attributes, context);\n  }\n\n  if (output.Name !== undefined && output.Name !== null) {\n    contents.Name = output.Name;\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restJson1_1LexiconDescriptionList = function (output, context) {\n  return (output || []).map(function (entry) {\n    return deserializeAws_restJson1_1LexiconDescription(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1_1LexiconNameList = function (output, context) {\n  return (output || []).map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1SpeechMarkTypeList = function (output, context) {\n  return (output || []).map(function (entry) {\n    return entry;\n  });\n};\n\nvar deserializeAws_restJson1_1SynthesisTask = function (output, context) {\n  var contents = {\n    __type: \"SynthesisTask\",\n    CreationTime: undefined,\n    Engine: undefined,\n    LanguageCode: undefined,\n    LexiconNames: undefined,\n    OutputFormat: undefined,\n    OutputUri: undefined,\n    RequestCharacters: undefined,\n    SampleRate: undefined,\n    SnsTopicArn: undefined,\n    SpeechMarkTypes: undefined,\n    TaskId: undefined,\n    TaskStatus: undefined,\n    TaskStatusReason: undefined,\n    TextType: undefined,\n    VoiceId: undefined\n  };\n\n  if (output.CreationTime !== undefined && output.CreationTime !== null) {\n    contents.CreationTime = new Date(Math.round(output.CreationTime * 1000));\n  }\n\n  if (output.Engine !== undefined && output.Engine !== null) {\n    contents.Engine = output.Engine;\n  }\n\n  if (output.LanguageCode !== undefined && output.LanguageCode !== null) {\n    contents.LanguageCode = output.LanguageCode;\n  }\n\n  if (output.LexiconNames !== undefined && output.LexiconNames !== null) {\n    contents.LexiconNames = deserializeAws_restJson1_1LexiconNameList(output.LexiconNames, context);\n  }\n\n  if (output.OutputFormat !== undefined && output.OutputFormat !== null) {\n    contents.OutputFormat = output.OutputFormat;\n  }\n\n  if (output.OutputUri !== undefined && output.OutputUri !== null) {\n    contents.OutputUri = output.OutputUri;\n  }\n\n  if (output.RequestCharacters !== undefined && output.RequestCharacters !== null) {\n    contents.RequestCharacters = output.RequestCharacters;\n  }\n\n  if (output.SampleRate !== undefined && output.SampleRate !== null) {\n    contents.SampleRate = output.SampleRate;\n  }\n\n  if (output.SnsTopicArn !== undefined && output.SnsTopicArn !== null) {\n    contents.SnsTopicArn = output.SnsTopicArn;\n  }\n\n  if (output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null) {\n    contents.SpeechMarkTypes = deserializeAws_restJson1_1SpeechMarkTypeList(output.SpeechMarkTypes, context);\n  }\n\n  if (output.TaskId !== undefined && output.TaskId !== null) {\n    contents.TaskId = output.TaskId;\n  }\n\n  if (output.TaskStatus !== undefined && output.TaskStatus !== null) {\n    contents.TaskStatus = output.TaskStatus;\n  }\n\n  if (output.TaskStatusReason !== undefined && output.TaskStatusReason !== null) {\n    contents.TaskStatusReason = output.TaskStatusReason;\n  }\n\n  if (output.TextType !== undefined && output.TextType !== null) {\n    contents.TextType = output.TextType;\n  }\n\n  if (output.VoiceId !== undefined && output.VoiceId !== null) {\n    contents.VoiceId = output.VoiceId;\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restJson1_1SynthesisTasks = function (output, context) {\n  return (output || []).map(function (entry) {\n    return deserializeAws_restJson1_1SynthesisTask(entry, context);\n  });\n};\n\nvar deserializeAws_restJson1_1Voice = function (output, context) {\n  var contents = {\n    __type: \"Voice\",\n    AdditionalLanguageCodes: undefined,\n    Gender: undefined,\n    Id: undefined,\n    LanguageCode: undefined,\n    LanguageName: undefined,\n    Name: undefined,\n    SupportedEngines: undefined\n  };\n\n  if (output.AdditionalLanguageCodes !== undefined && output.AdditionalLanguageCodes !== null) {\n    contents.AdditionalLanguageCodes = deserializeAws_restJson1_1LanguageCodeList(output.AdditionalLanguageCodes, context);\n  }\n\n  if (output.Gender !== undefined && output.Gender !== null) {\n    contents.Gender = output.Gender;\n  }\n\n  if (output.Id !== undefined && output.Id !== null) {\n    contents.Id = output.Id;\n  }\n\n  if (output.LanguageCode !== undefined && output.LanguageCode !== null) {\n    contents.LanguageCode = output.LanguageCode;\n  }\n\n  if (output.LanguageName !== undefined && output.LanguageName !== null) {\n    contents.LanguageName = output.LanguageName;\n  }\n\n  if (output.Name !== undefined && output.Name !== null) {\n    contents.Name = output.Name;\n  }\n\n  if (output.SupportedEngines !== undefined && output.SupportedEngines !== null) {\n    contents.SupportedEngines = deserializeAws_restJson1_1EngineList(output.SupportedEngines, context);\n  }\n\n  return contents;\n};\n\nvar deserializeAws_restJson1_1VoiceList = function (output, context) {\n  return (output || []).map(function (entry) {\n    return deserializeAws_restJson1_1Voice(entry, context);\n  });\n};\n\nvar deserializeMetadata = function (output) {\n  return {\n    httpStatusCode: output.statusCode,\n    httpHeaders: output.headers,\n    requestId: output.headers[\"x-amzn-requestid\"]\n  };\n}; // Collect low-level response body stream to Uint8Array.\n\n\nvar collectBody = function (streamBody, context) {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n}; // Encode Uint8Array data into string with utf-8.\n\n\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\n\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\n\n\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n\n    return cleanValue;\n  };\n\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};","map":{"version":3,"sources":["../../../protocols/Aws_restJson1_1.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __awaiter, __generator, __values } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport function serializeAws_restJson1_1DeleteLexiconCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, labelValue, body;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"\";\n            resolvedPath = \"/v1/lexicons/{Name}\";\n            if (input.Name !== undefined) {\n                labelValue = input.Name;\n                if (labelValue.length <= 0) {\n                    throw new Error(\"Empty value provided for input HTTP label: Name.\");\n                }\n                resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n            }\n            else {\n                throw new Error(\"No value provided for input HTTP label: Name.\");\n            }\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"DELETE\", headers: headers, path: resolvedPath, body: body }))];\n        });\n    });\n}\nexport function serializeAws_restJson1_1DescribeVoicesCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, query, body;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"\";\n            resolvedPath = \"/v1/voices\";\n            query = {};\n            if (input.Engine !== undefined) {\n                query[\"Engine\"] = input.Engine;\n            }\n            if (input.IncludeAdditionalLanguageCodes !== undefined) {\n                query[\"IncludeAdditionalLanguageCodes\"] = input.IncludeAdditionalLanguageCodes.toString();\n            }\n            if (input.LanguageCode !== undefined) {\n                query[\"LanguageCode\"] = input.LanguageCode;\n            }\n            if (input.NextToken !== undefined) {\n                query[\"NextToken\"] = input.NextToken;\n            }\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"GET\", headers: headers, path: resolvedPath, query: query, body: body }))];\n        });\n    });\n}\nexport function serializeAws_restJson1_1GetLexiconCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, labelValue, body;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"\";\n            resolvedPath = \"/v1/lexicons/{Name}\";\n            if (input.Name !== undefined) {\n                labelValue = input.Name;\n                if (labelValue.length <= 0) {\n                    throw new Error(\"Empty value provided for input HTTP label: Name.\");\n                }\n                resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n            }\n            else {\n                throw new Error(\"No value provided for input HTTP label: Name.\");\n            }\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"GET\", headers: headers, path: resolvedPath, body: body }))];\n        });\n    });\n}\nexport function serializeAws_restJson1_1GetSpeechSynthesisTaskCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, labelValue, body;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"\";\n            resolvedPath = \"/v1/synthesisTasks/{TaskId}\";\n            if (input.TaskId !== undefined) {\n                labelValue = input.TaskId;\n                if (labelValue.length <= 0) {\n                    throw new Error(\"Empty value provided for input HTTP label: TaskId.\");\n                }\n                resolvedPath = resolvedPath.replace(\"{TaskId}\", __extendedEncodeURIComponent(labelValue));\n            }\n            else {\n                throw new Error(\"No value provided for input HTTP label: TaskId.\");\n            }\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"GET\", headers: headers, path: resolvedPath, body: body }))];\n        });\n    });\n}\nexport function serializeAws_restJson1_1ListLexiconsCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, query, body;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"\";\n            resolvedPath = \"/v1/lexicons\";\n            query = {};\n            if (input.NextToken !== undefined) {\n                query[\"NextToken\"] = input.NextToken;\n            }\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"GET\", headers: headers, path: resolvedPath, query: query, body: body }))];\n        });\n    });\n}\nexport function serializeAws_restJson1_1ListSpeechSynthesisTasksCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, query, body;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"\";\n            resolvedPath = \"/v1/synthesisTasks\";\n            query = {};\n            if (input.MaxResults !== undefined) {\n                query[\"MaxResults\"] = input.MaxResults.toString();\n            }\n            if (input.NextToken !== undefined) {\n                query[\"NextToken\"] = input.NextToken;\n            }\n            if (input.Status !== undefined) {\n                query[\"Status\"] = input.Status;\n            }\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"GET\", headers: headers, path: resolvedPath, query: query, body: body }))];\n        });\n    });\n}\nexport function serializeAws_restJson1_1PutLexiconCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, labelValue, body, bodyParams;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"application/json\";\n            resolvedPath = \"/v1/lexicons/{Name}\";\n            if (input.Name !== undefined) {\n                labelValue = input.Name;\n                if (labelValue.length <= 0) {\n                    throw new Error(\"Empty value provided for input HTTP label: Name.\");\n                }\n                resolvedPath = resolvedPath.replace(\"{Name}\", __extendedEncodeURIComponent(labelValue));\n            }\n            else {\n                throw new Error(\"No value provided for input HTTP label: Name.\");\n            }\n            bodyParams = {};\n            if (input.Content !== undefined) {\n                bodyParams[\"Content\"] = input.Content;\n            }\n            body = JSON.stringify(bodyParams);\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"PUT\", headers: headers, path: resolvedPath, body: body }))];\n        });\n    });\n}\nexport function serializeAws_restJson1_1StartSpeechSynthesisTaskCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, body, bodyParams;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"application/json\";\n            resolvedPath = \"/v1/synthesisTasks\";\n            bodyParams = {};\n            if (input.Engine !== undefined) {\n                bodyParams[\"Engine\"] = input.Engine;\n            }\n            if (input.LanguageCode !== undefined) {\n                bodyParams[\"LanguageCode\"] = input.LanguageCode;\n            }\n            if (input.LexiconNames !== undefined) {\n                bodyParams[\"LexiconNames\"] = serializeAws_restJson1_1LexiconNameList(input.LexiconNames, context);\n            }\n            if (input.OutputFormat !== undefined) {\n                bodyParams[\"OutputFormat\"] = input.OutputFormat;\n            }\n            if (input.OutputS3BucketName !== undefined) {\n                bodyParams[\"OutputS3BucketName\"] = input.OutputS3BucketName;\n            }\n            if (input.OutputS3KeyPrefix !== undefined) {\n                bodyParams[\"OutputS3KeyPrefix\"] = input.OutputS3KeyPrefix;\n            }\n            if (input.SampleRate !== undefined) {\n                bodyParams[\"SampleRate\"] = input.SampleRate;\n            }\n            if (input.SnsTopicArn !== undefined) {\n                bodyParams[\"SnsTopicArn\"] = input.SnsTopicArn;\n            }\n            if (input.SpeechMarkTypes !== undefined) {\n                bodyParams[\"SpeechMarkTypes\"] = serializeAws_restJson1_1SpeechMarkTypeList(input.SpeechMarkTypes, context);\n            }\n            if (input.Text !== undefined) {\n                bodyParams[\"Text\"] = input.Text;\n            }\n            if (input.TextType !== undefined) {\n                bodyParams[\"TextType\"] = input.TextType;\n            }\n            if (input.VoiceId !== undefined) {\n                bodyParams[\"VoiceId\"] = input.VoiceId;\n            }\n            body = JSON.stringify(bodyParams);\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"POST\", headers: headers, path: resolvedPath, body: body }))];\n        });\n    });\n}\nexport function serializeAws_restJson1_1SynthesizeSpeechCommand(input, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var headers, resolvedPath, body, bodyParams;\n        return __generator(this, function (_a) {\n            headers = {};\n            headers[\"Content-Type\"] = \"application/json\";\n            resolvedPath = \"/v1/speech\";\n            bodyParams = {};\n            if (input.Engine !== undefined) {\n                bodyParams[\"Engine\"] = input.Engine;\n            }\n            if (input.LanguageCode !== undefined) {\n                bodyParams[\"LanguageCode\"] = input.LanguageCode;\n            }\n            if (input.LexiconNames !== undefined) {\n                bodyParams[\"LexiconNames\"] = serializeAws_restJson1_1LexiconNameList(input.LexiconNames, context);\n            }\n            if (input.OutputFormat !== undefined) {\n                bodyParams[\"OutputFormat\"] = input.OutputFormat;\n            }\n            if (input.SampleRate !== undefined) {\n                bodyParams[\"SampleRate\"] = input.SampleRate;\n            }\n            if (input.SpeechMarkTypes !== undefined) {\n                bodyParams[\"SpeechMarkTypes\"] = serializeAws_restJson1_1SpeechMarkTypeList(input.SpeechMarkTypes, context);\n            }\n            if (input.Text !== undefined) {\n                bodyParams[\"Text\"] = input.Text;\n            }\n            if (input.TextType !== undefined) {\n                bodyParams[\"TextType\"] = input.TextType;\n            }\n            if (input.VoiceId !== undefined) {\n                bodyParams[\"VoiceId\"] = input.VoiceId;\n            }\n            body = JSON.stringify(bodyParams);\n            return [2 /*return*/, new __HttpRequest(__assign(__assign({}, context.endpoint), { protocol: \"https\", method: \"POST\", headers: headers, path: resolvedPath, body: body }))];\n        });\n    });\n}\nexport function deserializeAws_restJson1_1DeleteLexiconCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (output.statusCode !== 200 && output.statusCode >= 400) {\n                        return [2 /*return*/, deserializeAws_restJson1_1DeleteLexiconCommandError(output, context)];\n                    }\n                    contents = {\n                        $metadata: deserializeMetadata(output),\n                        __type: \"DeleteLexiconOutput\"\n                    };\n                    return [4 /*yield*/, collectBody(output.body, context)];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/, Promise.resolve(contents)];\n            }\n        });\n    });\n}\nfunction deserializeAws_restJson1_1DeleteLexiconCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n        return __generator(this, function (_f) {\n            switch (_f.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"LexiconNotFoundException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#LexiconNotFoundException\": return [3 /*break*/, 2];\n                        case \"ServiceFailureException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 4];\n                    }\n                    return [3 /*break*/, 6];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 6:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _f.label = 7;\n                case 7:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nexport function deserializeAws_restJson1_1DescribeVoicesCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents, data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (output.statusCode !== 200 && output.statusCode >= 400) {\n                        return [2 /*return*/, deserializeAws_restJson1_1DescribeVoicesCommandError(output, context)];\n                    }\n                    contents = {\n                        $metadata: deserializeMetadata(output),\n                        __type: \"DescribeVoicesOutput\",\n                        NextToken: undefined,\n                        Voices: undefined\n                    };\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    data = _a.sent();\n                    if (data.NextToken !== undefined && data.NextToken !== null) {\n                        contents.NextToken = data.NextToken;\n                    }\n                    if (data.Voices !== undefined && data.Voices !== null) {\n                        contents.Voices = deserializeAws_restJson1_1VoiceList(data.Voices, context);\n                    }\n                    return [2 /*return*/, Promise.resolve(contents)];\n            }\n        });\n    });\n}\nfunction deserializeAws_restJson1_1DescribeVoicesCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n        return __generator(this, function (_f) {\n            switch (_f.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"InvalidNextTokenException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#InvalidNextTokenException\": return [3 /*break*/, 2];\n                        case \"ServiceFailureException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 4];\n                    }\n                    return [3 /*break*/, 6];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 6:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _f.label = 7;\n                case 7:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nexport function deserializeAws_restJson1_1GetLexiconCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents, data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (output.statusCode !== 200 && output.statusCode >= 400) {\n                        return [2 /*return*/, deserializeAws_restJson1_1GetLexiconCommandError(output, context)];\n                    }\n                    contents = {\n                        $metadata: deserializeMetadata(output),\n                        __type: \"GetLexiconOutput\",\n                        Lexicon: undefined,\n                        LexiconAttributes: undefined\n                    };\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    data = _a.sent();\n                    if (data.Lexicon !== undefined && data.Lexicon !== null) {\n                        contents.Lexicon = deserializeAws_restJson1_1Lexicon(data.Lexicon, context);\n                    }\n                    if (data.LexiconAttributes !== undefined && data.LexiconAttributes !== null) {\n                        contents.LexiconAttributes = deserializeAws_restJson1_1LexiconAttributes(data.LexiconAttributes, context);\n                    }\n                    return [2 /*return*/, Promise.resolve(contents)];\n            }\n        });\n    });\n}\nfunction deserializeAws_restJson1_1GetLexiconCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n        return __generator(this, function (_f) {\n            switch (_f.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"LexiconNotFoundException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#LexiconNotFoundException\": return [3 /*break*/, 2];\n                        case \"ServiceFailureException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 4];\n                    }\n                    return [3 /*break*/, 6];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 6:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _f.label = 7;\n                case 7:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nexport function deserializeAws_restJson1_1GetSpeechSynthesisTaskCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents, data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (output.statusCode !== 200 && output.statusCode >= 400) {\n                        return [2 /*return*/, deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError(output, context)];\n                    }\n                    contents = {\n                        $metadata: deserializeMetadata(output),\n                        __type: \"GetSpeechSynthesisTaskOutput\",\n                        SynthesisTask: undefined\n                    };\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    data = _a.sent();\n                    if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n                        contents.SynthesisTask = deserializeAws_restJson1_1SynthesisTask(data.SynthesisTask, context);\n                    }\n                    return [2 /*return*/, Promise.resolve(contents)];\n            }\n        });\n    });\n}\nfunction deserializeAws_restJson1_1GetSpeechSynthesisTaskCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, parsedBody, message;\n        return __generator(this, function (_g) {\n            switch (_g.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _g.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"InvalidTaskIdException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#InvalidTaskIdException\": return [3 /*break*/, 2];\n                        case \"ServiceFailureException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 4];\n                        case \"SynthesisTaskNotFoundException\": return [3 /*break*/, 6];\n                        case \"com.amazonaws.parrot.v1#SynthesisTaskNotFoundException\": return [3 /*break*/, 6];\n                    }\n                    return [3 /*break*/, 8];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidTaskIdExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 9];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 9];\n                case 6:\n                    _f = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse(parsedOutput, context)];\n                case 7:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_g.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 9];\n                case 8:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _g.label = 9;\n                case 9:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nexport function deserializeAws_restJson1_1ListLexiconsCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents, data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (output.statusCode !== 200 && output.statusCode >= 400) {\n                        return [2 /*return*/, deserializeAws_restJson1_1ListLexiconsCommandError(output, context)];\n                    }\n                    contents = {\n                        $metadata: deserializeMetadata(output),\n                        __type: \"ListLexiconsOutput\",\n                        Lexicons: undefined,\n                        NextToken: undefined\n                    };\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    data = _a.sent();\n                    if (data.Lexicons !== undefined && data.Lexicons !== null) {\n                        contents.Lexicons = deserializeAws_restJson1_1LexiconDescriptionList(data.Lexicons, context);\n                    }\n                    if (data.NextToken !== undefined && data.NextToken !== null) {\n                        contents.NextToken = data.NextToken;\n                    }\n                    return [2 /*return*/, Promise.resolve(contents)];\n            }\n        });\n    });\n}\nfunction deserializeAws_restJson1_1ListLexiconsCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n        return __generator(this, function (_f) {\n            switch (_f.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"InvalidNextTokenException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#InvalidNextTokenException\": return [3 /*break*/, 2];\n                        case \"ServiceFailureException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 4];\n                    }\n                    return [3 /*break*/, 6];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 6:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _f.label = 7;\n                case 7:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nexport function deserializeAws_restJson1_1ListSpeechSynthesisTasksCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents, data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (output.statusCode !== 200 && output.statusCode >= 400) {\n                        return [2 /*return*/, deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError(output, context)];\n                    }\n                    contents = {\n                        $metadata: deserializeMetadata(output),\n                        __type: \"ListSpeechSynthesisTasksOutput\",\n                        NextToken: undefined,\n                        SynthesisTasks: undefined\n                    };\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    data = _a.sent();\n                    if (data.NextToken !== undefined && data.NextToken !== null) {\n                        contents.NextToken = data.NextToken;\n                    }\n                    if (data.SynthesisTasks !== undefined && data.SynthesisTasks !== null) {\n                        contents.SynthesisTasks = deserializeAws_restJson1_1SynthesisTasks(data.SynthesisTasks, context);\n                    }\n                    return [2 /*return*/, Promise.resolve(contents)];\n            }\n        });\n    });\n}\nfunction deserializeAws_restJson1_1ListSpeechSynthesisTasksCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, parsedBody, message;\n        return __generator(this, function (_f) {\n            switch (_f.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _f.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"InvalidNextTokenException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#InvalidNextTokenException\": return [3 /*break*/, 2];\n                        case \"ServiceFailureException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 4];\n                    }\n                    return [3 /*break*/, 6];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidNextTokenExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 7];\n                case 6:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _f.label = 7;\n                case 7:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nexport function deserializeAws_restJson1_1PutLexiconCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (output.statusCode !== 200 && output.statusCode >= 400) {\n                        return [2 /*return*/, deserializeAws_restJson1_1PutLexiconCommandError(output, context)];\n                    }\n                    contents = {\n                        $metadata: deserializeMetadata(output),\n                        __type: \"PutLexiconOutput\"\n                    };\n                    return [4 /*yield*/, collectBody(output.body, context)];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/, Promise.resolve(contents)];\n            }\n        });\n    });\n}\nfunction deserializeAws_restJson1_1PutLexiconCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n        return __generator(this, function (_l) {\n            switch (_l.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _l.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"InvalidLexiconException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#InvalidLexiconException\": return [3 /*break*/, 2];\n                        case \"LexiconSizeExceededException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#LexiconSizeExceededException\": return [3 /*break*/, 4];\n                        case \"MaxLexemeLengthExceededException\": return [3 /*break*/, 6];\n                        case \"com.amazonaws.parrot.v1#MaxLexemeLengthExceededException\": return [3 /*break*/, 6];\n                        case \"MaxLexiconsNumberExceededException\": return [3 /*break*/, 8];\n                        case \"com.amazonaws.parrot.v1#MaxLexiconsNumberExceededException\": return [3 /*break*/, 8];\n                        case \"ServiceFailureException\": return [3 /*break*/, 10];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 10];\n                        case \"UnsupportedPlsAlphabetException\": return [3 /*break*/, 12];\n                        case \"com.amazonaws.parrot.v1#UnsupportedPlsAlphabetException\": return [3 /*break*/, 12];\n                        case \"UnsupportedPlsLanguageException\": return [3 /*break*/, 14];\n                        case \"com.amazonaws.parrot.v1#UnsupportedPlsLanguageException\": return [3 /*break*/, 14];\n                    }\n                    return [3 /*break*/, 16];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidLexiconExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 17];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 17];\n                case 6:\n                    _f = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse(parsedOutput, context)];\n                case 7:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 17];\n                case 8:\n                    _g = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse(parsedOutput, context)];\n                case 9:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 17];\n                case 10:\n                    _h = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 11:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 17];\n                case 12:\n                    _j = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse(parsedOutput, context)];\n                case 13:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 17];\n                case 14:\n                    _k = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse(parsedOutput, context)];\n                case 15:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_l.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 17];\n                case 16:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _l.label = 17;\n                case 17:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nexport function deserializeAws_restJson1_1StartSpeechSynthesisTaskCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents, data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (output.statusCode !== 200 && output.statusCode >= 400) {\n                        return [2 /*return*/, deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError(output, context)];\n                    }\n                    contents = {\n                        $metadata: deserializeMetadata(output),\n                        __type: \"StartSpeechSynthesisTaskOutput\",\n                        SynthesisTask: undefined\n                    };\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    data = _a.sent();\n                    if (data.SynthesisTask !== undefined && data.SynthesisTask !== null) {\n                        contents.SynthesisTask = deserializeAws_restJson1_1SynthesisTask(data.SynthesisTask, context);\n                    }\n                    return [2 /*return*/, Promise.resolve(contents)];\n            }\n        });\n    });\n}\nfunction deserializeAws_restJson1_1StartSpeechSynthesisTaskCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, parsedBody, message;\n        return __generator(this, function (_r) {\n            switch (_r.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _r.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"EngineNotSupportedException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#EngineNotSupportedException\": return [3 /*break*/, 2];\n                        case \"InvalidS3BucketException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#InvalidS3BucketException\": return [3 /*break*/, 4];\n                        case \"InvalidS3KeyException\": return [3 /*break*/, 6];\n                        case \"com.amazonaws.parrot.v1#InvalidS3KeyException\": return [3 /*break*/, 6];\n                        case \"InvalidSampleRateException\": return [3 /*break*/, 8];\n                        case \"com.amazonaws.parrot.v1#InvalidSampleRateException\": return [3 /*break*/, 8];\n                        case \"InvalidSnsTopicArnException\": return [3 /*break*/, 10];\n                        case \"com.amazonaws.parrot.v1#InvalidSnsTopicArnException\": return [3 /*break*/, 10];\n                        case \"InvalidSsmlException\": return [3 /*break*/, 12];\n                        case \"com.amazonaws.parrot.v1#InvalidSsmlException\": return [3 /*break*/, 12];\n                        case \"LanguageNotSupportedException\": return [3 /*break*/, 14];\n                        case \"com.amazonaws.parrot.v1#LanguageNotSupportedException\": return [3 /*break*/, 14];\n                        case \"LexiconNotFoundException\": return [3 /*break*/, 16];\n                        case \"com.amazonaws.parrot.v1#LexiconNotFoundException\": return [3 /*break*/, 16];\n                        case \"MarksNotSupportedForFormatException\": return [3 /*break*/, 18];\n                        case \"com.amazonaws.parrot.v1#MarksNotSupportedForFormatException\": return [3 /*break*/, 18];\n                        case \"ServiceFailureException\": return [3 /*break*/, 20];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 20];\n                        case \"SsmlMarksNotSupportedForTextTypeException\": return [3 /*break*/, 22];\n                        case \"com.amazonaws.parrot.v1#SsmlMarksNotSupportedForTextTypeException\": return [3 /*break*/, 22];\n                        case \"TextLengthExceededException\": return [3 /*break*/, 24];\n                        case \"com.amazonaws.parrot.v1#TextLengthExceededException\": return [3 /*break*/, 24];\n                    }\n                    return [3 /*break*/, 26];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidS3BucketExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 6:\n                    _f = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidS3KeyExceptionResponse(parsedOutput, context)];\n                case 7:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 8:\n                    _g = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n                case 9:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 10:\n                    _h = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse(parsedOutput, context)];\n                case 11:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 12:\n                    _j = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context)];\n                case 13:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 14:\n                    _k = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n                case 15:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 16:\n                    _l = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n                case 17:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 18:\n                    _m = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n                case 19:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 20:\n                    _o = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 21:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 22:\n                    _p = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n                case 23:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _p.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 24:\n                    _q = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context)];\n                case 25:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _q.concat([(_r.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 27];\n                case 26:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _r.label = 27;\n                case 27:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nexport function deserializeAws_restJson1_1SynthesizeSpeechCommand(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var contents, data;\n        return __generator(this, function (_a) {\n            if (output.statusCode !== 200 && output.statusCode >= 400) {\n                return [2 /*return*/, deserializeAws_restJson1_1SynthesizeSpeechCommandError(output, context)];\n            }\n            contents = {\n                $metadata: deserializeMetadata(output),\n                __type: \"SynthesizeSpeechOutput\",\n                AudioStream: undefined,\n                ContentType: undefined,\n                RequestCharacters: undefined\n            };\n            if (output.headers[\"content-type\"] !== undefined) {\n                contents.ContentType = output.headers[\"content-type\"];\n            }\n            if (output.headers[\"x-amzn-requestcharacters\"] !== undefined) {\n                contents.RequestCharacters = parseInt(output.headers[\"x-amzn-requestcharacters\"], 10);\n            }\n            data = output.body;\n            contents.AudioStream = data;\n            return [2 /*return*/, Promise.resolve(contents)];\n        });\n    });\n}\nfunction deserializeAws_restJson1_1SynthesizeSpeechCommandError(output, context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var parsedOutput, _a, _b, response, errorCode, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, parsedBody, message;\n        return __generator(this, function (_o) {\n            switch (_o.label) {\n                case 0:\n                    _a = [__assign({}, output)];\n                    _b = {};\n                    return [4 /*yield*/, parseBody(output.body, context)];\n                case 1:\n                    parsedOutput = __assign.apply(void 0, _a.concat([(_b.body = _o.sent(), _b)]));\n                    errorCode = \"UnknownError\";\n                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                    _c = errorCode;\n                    switch (_c) {\n                        case \"EngineNotSupportedException\": return [3 /*break*/, 2];\n                        case \"com.amazonaws.parrot.v1#EngineNotSupportedException\": return [3 /*break*/, 2];\n                        case \"InvalidSampleRateException\": return [3 /*break*/, 4];\n                        case \"com.amazonaws.parrot.v1#InvalidSampleRateException\": return [3 /*break*/, 4];\n                        case \"InvalidSsmlException\": return [3 /*break*/, 6];\n                        case \"com.amazonaws.parrot.v1#InvalidSsmlException\": return [3 /*break*/, 6];\n                        case \"LanguageNotSupportedException\": return [3 /*break*/, 8];\n                        case \"com.amazonaws.parrot.v1#LanguageNotSupportedException\": return [3 /*break*/, 8];\n                        case \"LexiconNotFoundException\": return [3 /*break*/, 10];\n                        case \"com.amazonaws.parrot.v1#LexiconNotFoundException\": return [3 /*break*/, 10];\n                        case \"MarksNotSupportedForFormatException\": return [3 /*break*/, 12];\n                        case \"com.amazonaws.parrot.v1#MarksNotSupportedForFormatException\": return [3 /*break*/, 12];\n                        case \"ServiceFailureException\": return [3 /*break*/, 14];\n                        case \"com.amazonaws.parrot.v1#ServiceFailureException\": return [3 /*break*/, 14];\n                        case \"SsmlMarksNotSupportedForTextTypeException\": return [3 /*break*/, 16];\n                        case \"com.amazonaws.parrot.v1#SsmlMarksNotSupportedForTextTypeException\": return [3 /*break*/, 16];\n                        case \"TextLengthExceededException\": return [3 /*break*/, 18];\n                        case \"com.amazonaws.parrot.v1#TextLengthExceededException\": return [3 /*break*/, 18];\n                    }\n                    return [3 /*break*/, 20];\n                case 2:\n                    _d = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1EngineNotSupportedExceptionResponse(parsedOutput, context)];\n                case 3:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 4:\n                    _e = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSampleRateExceptionResponse(parsedOutput, context)];\n                case 5:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 6:\n                    _f = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1InvalidSsmlExceptionResponse(parsedOutput, context)];\n                case 7:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 8:\n                    _g = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse(parsedOutput, context)];\n                case 9:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 10:\n                    _h = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1LexiconNotFoundExceptionResponse(parsedOutput, context)];\n                case 11:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 12:\n                    _j = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse(parsedOutput, context)];\n                case 13:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 14:\n                    _k = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1ServiceFailureExceptionResponse(parsedOutput, context)];\n                case 15:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 16:\n                    _l = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse(parsedOutput, context)];\n                case 17:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 18:\n                    _m = [{}];\n                    return [4 /*yield*/, deserializeAws_restJson1_1TextLengthExceededExceptionResponse(parsedOutput, context)];\n                case 19:\n                    response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_o.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                    return [3 /*break*/, 21];\n                case 20:\n                    parsedBody = parsedOutput.body;\n                    errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                    response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                    _o.label = 21;\n                case 21:\n                    message = response.message || response.Message || errorCode;\n                    response.message = message;\n                    delete response.Message;\n                    return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n            }\n        });\n    });\n}\nvar deserializeAws_restJson1_1EngineNotSupportedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"EngineNotSupportedException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1InvalidLexiconExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InvalidLexiconException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1InvalidNextTokenExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InvalidNextTokenException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1InvalidS3BucketExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InvalidS3BucketException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1InvalidS3KeyExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InvalidS3KeyException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1InvalidSampleRateExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InvalidSampleRateException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1InvalidSnsTopicArnExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InvalidSnsTopicArnException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1InvalidSsmlExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InvalidSsmlException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1InvalidTaskIdExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InvalidTaskIdException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1LanguageNotSupportedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"LanguageNotSupportedException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1LexiconNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"LexiconNotFoundException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1LexiconSizeExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"LexiconSizeExceededException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1MarksNotSupportedForFormatExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"MarksNotSupportedForFormatException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1MaxLexemeLengthExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"MaxLexemeLengthExceededException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1MaxLexiconsNumberExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"MaxLexiconsNumberExceededException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1ServiceFailureExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"ServiceFailureException\",\n            $fault: \"server\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1SsmlMarksNotSupportedForTextTypeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"SsmlMarksNotSupportedForTextTypeException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1SynthesisTaskNotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"SynthesisTaskNotFoundException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1TextLengthExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"TextLengthExceededException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1UnsupportedPlsAlphabetExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"UnsupportedPlsAlphabetException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1_1UnsupportedPlsLanguageExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"UnsupportedPlsLanguageException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar serializeAws_restJson1_1LexiconNameList = function (input, context) {\n    var e_1, _a;\n    var contents = [];\n    try {\n        for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {\n            var entry = input_1_1.value;\n            contents.push(entry);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return contents;\n};\nvar serializeAws_restJson1_1SpeechMarkTypeList = function (input, context) {\n    var e_2, _a;\n    var contents = [];\n    try {\n        for (var input_2 = __values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {\n            var entry = input_2_1.value;\n            contents.push(entry);\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (input_2_1 && !input_2_1.done && (_a = input_2.return)) _a.call(input_2);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return contents;\n};\nvar deserializeAws_restJson1_1EngineList = function (output, context) {\n    return (output || []).map(function (entry) { return entry; });\n};\nvar deserializeAws_restJson1_1LanguageCodeList = function (output, context) {\n    return (output || []).map(function (entry) { return entry; });\n};\nvar deserializeAws_restJson1_1Lexicon = function (output, context) {\n    var contents = {\n        __type: \"Lexicon\",\n        Content: undefined,\n        Name: undefined\n    };\n    if (output.Content !== undefined && output.Content !== null) {\n        contents.Content = output.Content;\n    }\n    if (output.Name !== undefined && output.Name !== null) {\n        contents.Name = output.Name;\n    }\n    return contents;\n};\nvar deserializeAws_restJson1_1LexiconAttributes = function (output, context) {\n    var contents = {\n        __type: \"LexiconAttributes\",\n        Alphabet: undefined,\n        LanguageCode: undefined,\n        LastModified: undefined,\n        LexemesCount: undefined,\n        LexiconArn: undefined,\n        Size: undefined\n    };\n    if (output.Alphabet !== undefined && output.Alphabet !== null) {\n        contents.Alphabet = output.Alphabet;\n    }\n    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {\n        contents.LanguageCode = output.LanguageCode;\n    }\n    if (output.LastModified !== undefined && output.LastModified !== null) {\n        contents.LastModified = new Date(Math.round(output.LastModified * 1000));\n    }\n    if (output.LexemesCount !== undefined && output.LexemesCount !== null) {\n        contents.LexemesCount = output.LexemesCount;\n    }\n    if (output.LexiconArn !== undefined && output.LexiconArn !== null) {\n        contents.LexiconArn = output.LexiconArn;\n    }\n    if (output.Size !== undefined && output.Size !== null) {\n        contents.Size = output.Size;\n    }\n    return contents;\n};\nvar deserializeAws_restJson1_1LexiconDescription = function (output, context) {\n    var contents = {\n        __type: \"LexiconDescription\",\n        Attributes: undefined,\n        Name: undefined\n    };\n    if (output.Attributes !== undefined && output.Attributes !== null) {\n        contents.Attributes = deserializeAws_restJson1_1LexiconAttributes(output.Attributes, context);\n    }\n    if (output.Name !== undefined && output.Name !== null) {\n        contents.Name = output.Name;\n    }\n    return contents;\n};\nvar deserializeAws_restJson1_1LexiconDescriptionList = function (output, context) {\n    return (output || []).map(function (entry) {\n        return deserializeAws_restJson1_1LexiconDescription(entry, context);\n    });\n};\nvar deserializeAws_restJson1_1LexiconNameList = function (output, context) {\n    return (output || []).map(function (entry) { return entry; });\n};\nvar deserializeAws_restJson1_1SpeechMarkTypeList = function (output, context) {\n    return (output || []).map(function (entry) { return entry; });\n};\nvar deserializeAws_restJson1_1SynthesisTask = function (output, context) {\n    var contents = {\n        __type: \"SynthesisTask\",\n        CreationTime: undefined,\n        Engine: undefined,\n        LanguageCode: undefined,\n        LexiconNames: undefined,\n        OutputFormat: undefined,\n        OutputUri: undefined,\n        RequestCharacters: undefined,\n        SampleRate: undefined,\n        SnsTopicArn: undefined,\n        SpeechMarkTypes: undefined,\n        TaskId: undefined,\n        TaskStatus: undefined,\n        TaskStatusReason: undefined,\n        TextType: undefined,\n        VoiceId: undefined\n    };\n    if (output.CreationTime !== undefined && output.CreationTime !== null) {\n        contents.CreationTime = new Date(Math.round(output.CreationTime * 1000));\n    }\n    if (output.Engine !== undefined && output.Engine !== null) {\n        contents.Engine = output.Engine;\n    }\n    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {\n        contents.LanguageCode = output.LanguageCode;\n    }\n    if (output.LexiconNames !== undefined && output.LexiconNames !== null) {\n        contents.LexiconNames = deserializeAws_restJson1_1LexiconNameList(output.LexiconNames, context);\n    }\n    if (output.OutputFormat !== undefined && output.OutputFormat !== null) {\n        contents.OutputFormat = output.OutputFormat;\n    }\n    if (output.OutputUri !== undefined && output.OutputUri !== null) {\n        contents.OutputUri = output.OutputUri;\n    }\n    if (output.RequestCharacters !== undefined &&\n        output.RequestCharacters !== null) {\n        contents.RequestCharacters = output.RequestCharacters;\n    }\n    if (output.SampleRate !== undefined && output.SampleRate !== null) {\n        contents.SampleRate = output.SampleRate;\n    }\n    if (output.SnsTopicArn !== undefined && output.SnsTopicArn !== null) {\n        contents.SnsTopicArn = output.SnsTopicArn;\n    }\n    if (output.SpeechMarkTypes !== undefined && output.SpeechMarkTypes !== null) {\n        contents.SpeechMarkTypes = deserializeAws_restJson1_1SpeechMarkTypeList(output.SpeechMarkTypes, context);\n    }\n    if (output.TaskId !== undefined && output.TaskId !== null) {\n        contents.TaskId = output.TaskId;\n    }\n    if (output.TaskStatus !== undefined && output.TaskStatus !== null) {\n        contents.TaskStatus = output.TaskStatus;\n    }\n    if (output.TaskStatusReason !== undefined &&\n        output.TaskStatusReason !== null) {\n        contents.TaskStatusReason = output.TaskStatusReason;\n    }\n    if (output.TextType !== undefined && output.TextType !== null) {\n        contents.TextType = output.TextType;\n    }\n    if (output.VoiceId !== undefined && output.VoiceId !== null) {\n        contents.VoiceId = output.VoiceId;\n    }\n    return contents;\n};\nvar deserializeAws_restJson1_1SynthesisTasks = function (output, context) {\n    return (output || []).map(function (entry) {\n        return deserializeAws_restJson1_1SynthesisTask(entry, context);\n    });\n};\nvar deserializeAws_restJson1_1Voice = function (output, context) {\n    var contents = {\n        __type: \"Voice\",\n        AdditionalLanguageCodes: undefined,\n        Gender: undefined,\n        Id: undefined,\n        LanguageCode: undefined,\n        LanguageName: undefined,\n        Name: undefined,\n        SupportedEngines: undefined\n    };\n    if (output.AdditionalLanguageCodes !== undefined &&\n        output.AdditionalLanguageCodes !== null) {\n        contents.AdditionalLanguageCodes = deserializeAws_restJson1_1LanguageCodeList(output.AdditionalLanguageCodes, context);\n    }\n    if (output.Gender !== undefined && output.Gender !== null) {\n        contents.Gender = output.Gender;\n    }\n    if (output.Id !== undefined && output.Id !== null) {\n        contents.Id = output.Id;\n    }\n    if (output.LanguageCode !== undefined && output.LanguageCode !== null) {\n        contents.LanguageCode = output.LanguageCode;\n    }\n    if (output.LanguageName !== undefined && output.LanguageName !== null) {\n        contents.LanguageName = output.LanguageName;\n    }\n    if (output.Name !== undefined && output.Name !== null) {\n        contents.Name = output.Name;\n    }\n    if (output.SupportedEngines !== undefined &&\n        output.SupportedEngines !== null) {\n        contents.SupportedEngines = deserializeAws_restJson1_1EngineList(output.SupportedEngines, context);\n    }\n    return contents;\n};\nvar deserializeAws_restJson1_1VoiceList = function (output, context) {\n    return (output || []).map(function (entry) {\n        return deserializeAws_restJson1_1Voice(entry, context);\n    });\n};\nvar deserializeMetadata = function (output) { return ({\n    httpStatusCode: output.statusCode,\n    httpHeaders: output.headers,\n    requestId: output.headers[\"x-amzn-requestid\"]\n}); };\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return (context.streamCollector(streamBody) || Promise.resolve(new Uint8Array()));\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n    return collectBody(streamBody, context).then(function (body) {\n        return context.utf8Encoder(body);\n    });\n};\nvar parseBody = function (streamBody, context) {\n    return collectBodyString(streamBody, context).then(function (encoded) {\n        if (encoded.length) {\n            return JSON.parse(encoded);\n        }\n        return {};\n    });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nvar loadRestJsonErrorCode = function (output, data) {\n    var findKey = function (object, key) {\n        return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); });\n    };\n    var sanitizeErrorCode = function (rawValue) {\n        var cleanValue = rawValue;\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n    return \"\";\n};\n//# sourceMappingURL=Aws_restJson1_1.js.map"]},"metadata":{},"sourceType":"module"}