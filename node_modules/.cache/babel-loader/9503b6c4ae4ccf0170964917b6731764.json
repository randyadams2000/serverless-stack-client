{"ast":null,"code":"var _jsxFileName = \"/Users/randyadams/notes-app-client/src/components/BillingForm.js\";\nimport React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { CardElement, injectStripe } from \"react-stripe-elements\";\nimport LoaderButton from \"./LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./BillingForm.css\";\n\nfunction BillingForm({\n  isLoading,\n  onSubmit,\n  ...props\n}) {\n  const [fields, handleFieldChange] = useFormFields({\n    name: \"\",\n    storage: \"\"\n  });\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isCardComplete, setIsCardComplete] = useState(false);\n  isLoading = isProcessing || isLoading;\n\n  function validateForm() {\n    return fields.name !== \"\" && fields.storage !== \"\" && isCardComplete;\n  }\n\n  async function handleSubmitClick(event) {\n    event.preventDefault();\n    setIsProcessing(true);\n    const {\n      token,\n      error\n    } = await props.stripe.createToken({\n      name: fields.name\n    });\n    setIsProcessing(false);\n    onSubmit(fields.storage, {\n      token,\n      error\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"BillingForm\",\n    onSubmit: handleSubmitClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    bsSize: \"large\",\n    controlId: \"storage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ControlLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Storage\"), /*#__PURE__*/React.createElement(FormControl, {\n    min: \"0\",\n    type: \"number\",\n    value: fields.storage,\n    onChange: handleFieldChange,\n    placeholder: \"Number of notes to store\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FormGroup, {\n    bsSize: \"large\",\n    controlId: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ControlLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Cardholder's name\"), /*#__PURE__*/React.createElement(FormControl, {\n    type: \"text\",\n    value: fields.name,\n    onChange: handleFieldChange,\n    placeholder: \"Name on the card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ControlLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Credit Card Info\"), /*#__PURE__*/React.createElement(CardElement, {\n    className: \"card-field\",\n    onChange: e => setIsCardComplete(e.complete),\n    style: {\n      base: {\n        fontSize: \"18px\",\n        fontFamily: '\"Open Sans\", sans-serif'\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(LoaderButton, {\n    block: true,\n    type: \"submit\",\n    bsSize: \"large\",\n    isLoading: isLoading,\n    disabled: !validateForm(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Purchase\"));\n}\n\nexport default injectStripe(BillingForm);","map":{"version":3,"sources":["/Users/randyadams/notes-app-client/src/components/BillingForm.js"],"names":["React","useState","FormGroup","FormControl","ControlLabel","CardElement","injectStripe","LoaderButton","useFormFields","BillingForm","isLoading","onSubmit","props","fields","handleFieldChange","name","storage","isProcessing","setIsProcessing","isCardComplete","setIsCardComplete","validateForm","handleSubmitClick","event","preventDefault","token","error","stripe","createToken","e","complete","base","fontSize","fontFamily"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { CardElement, injectStripe } from \"react-stripe-elements\";\nimport LoaderButton from \"./LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./BillingForm.css\";\n\nfunction BillingForm({ isLoading, onSubmit, ...props }) {\n  const [fields, handleFieldChange] = useFormFields({\n    name: \"\",\n    storage: \"\"\n  });\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isCardComplete, setIsCardComplete] = useState(false);\n\n  isLoading = isProcessing || isLoading;\n\n  function validateForm() {\n    return (\n      fields.name !== \"\" &&\n      fields.storage !== \"\" &&\n      isCardComplete\n    );\n  }\n\n  async function handleSubmitClick(event) {\n    event.preventDefault();\n\n    setIsProcessing(true);\n\n    const { token, error } = await props.stripe.createToken({ name: fields.name });\n\n    setIsProcessing(false);\n\n    onSubmit(fields.storage, { token, error });\n  }\n\n  return (\n    <form className=\"BillingForm\" onSubmit={handleSubmitClick}>\n      <FormGroup bsSize=\"large\" controlId=\"storage\">\n        <ControlLabel>Storage</ControlLabel>\n        <FormControl\n          min=\"0\"\n          type=\"number\"\n          value={fields.storage}\n          onChange={handleFieldChange}\n          placeholder=\"Number of notes to store\"\n        />\n      </FormGroup>\n      <hr />\n      <FormGroup bsSize=\"large\" controlId=\"name\">\n        <ControlLabel>Cardholder&apos;s name</ControlLabel>\n        <FormControl\n          type=\"text\"\n          value={fields.name}\n          onChange={handleFieldChange}\n          placeholder=\"Name on the card\"\n        />\n      </FormGroup>\n      <ControlLabel>Credit Card Info</ControlLabel>\n      <CardElement\n        className=\"card-field\"\n        onChange={e => setIsCardComplete(e.complete)}\n        style={{\n          base: { fontSize: \"18px\", fontFamily: '\"Open Sans\", sans-serif' }\n        }}\n      />\n      <LoaderButton\n        block\n        type=\"submit\"\n        bsSize=\"large\"\n        isLoading={isLoading}\n        disabled={!validateForm()}\n      >\n        Purchase\n      </LoaderButton>\n    </form>\n  );\n}\n\nexport default injectStripe(BillingForm);\n"]},"metadata":{},"sourceType":"module"}