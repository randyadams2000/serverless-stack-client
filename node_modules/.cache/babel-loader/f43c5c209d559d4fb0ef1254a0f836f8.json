{"ast":null,"code":"import{isPlainObject,isArray,isSymbol}from'is-what';/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */function __spreadArrays(){for(var s=0,i=0,il=arguments.length;i<il;i++){s+=arguments[i].length;}for(var r=Array(s),k=0,i=0;i<il;i++){for(var a=arguments[i],j=0,jl=a.length;j<jl;j++,k++){r[k]=a[j];}}return r;}function assignProp(carry,key,newVal,originalObject){var propType=originalObject.propertyIsEnumerable(key)?'enumerable':'nonenumerable';if(propType==='enumerable')carry[key]=newVal;if(propType==='nonenumerable'){Object.defineProperty(carry,key,{value:newVal,enumerable:false,writable:true,configurable:true});}}function mergeRecursively(origin,newComer,extensions){// work directly on newComer if its not an object\nif(!isPlainObject(newComer)){// extend merge rules\nif(extensions&&isArray(extensions)){extensions.forEach(function(extend){newComer=extend(origin,newComer);});}return newComer;}// define newObject to merge all values upon\nvar newObject={};if(isPlainObject(origin)){var props_1=Object.getOwnPropertyNames(origin);var symbols_1=Object.getOwnPropertySymbols(origin);newObject=__spreadArrays(props_1,symbols_1).reduce(function(carry,key){// @ts-ignore\nvar targetVal=origin[key];if(!isSymbol(key)&&!Object.getOwnPropertyNames(newComer).includes(key)||isSymbol(key)&&!Object.getOwnPropertySymbols(newComer).includes(key)){assignProp(carry,key,targetVal,origin);}return carry;},{});}var props=Object.getOwnPropertyNames(newComer);var symbols=Object.getOwnPropertySymbols(newComer);var result=__spreadArrays(props,symbols).reduce(function(carry,key){// re-define the origin and newComer as targetVal and newVal\nvar newVal=newComer[key];var targetVal=isPlainObject(origin)?// @ts-ignore\norigin[key]:undefined;// extend merge rules\nif(extensions&&isArray(extensions)){extensions.forEach(function(extend){newVal=extend(targetVal,newVal);});}// When newVal is an object do the merge recursively\nif(targetVal!==undefined&&isPlainObject(newVal)){newVal=mergeRecursively(targetVal,newVal,extensions);}assignProp(carry,key,newVal,newComer);return carry;},newObject);return result;}/**\r\n * Merge anything recursively.\r\n * Objects get merged, special objects (classes etc.) are re-assigned \"as is\".\r\n * Basic types overwrite objects or other basic types.\r\n *\r\n * @param {(IConfig | any)} origin\r\n * @param {...any[]} newComers\r\n * @returns the result\r\n */function merge(origin){var newComers=[];for(var _i=1;_i<arguments.length;_i++){newComers[_i-1]=arguments[_i];}var extensions=null;var base=origin;if(isPlainObject(origin)&&origin.extensions&&Object.keys(origin).length===1){base={};extensions=origin.extensions;}return newComers.reduce(function(result,newComer){return mergeRecursively(result,newComer,extensions);},base);}function concatArrays(originVal,newVal){if(isArray(originVal)&&isArray(newVal)){// concat logic\nreturn originVal.concat(newVal);}return newVal;// always return newVal as fallback!!\n}export default merge;export{concatArrays,merge};","map":{"version":3,"sources":["/Users/randyadams/IMMORTIFYV2/immortify-app-client/src/react-video-recorder-master/node_modules/merge-anything/dist/index.esm.js"],"names":["isPlainObject","isArray","isSymbol","__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","assignProp","carry","key","newVal","originalObject","propType","propertyIsEnumerable","Object","defineProperty","value","enumerable","writable","configurable","mergeRecursively","origin","newComer","extensions","forEach","extend","newObject","props_1","getOwnPropertyNames","symbols_1","getOwnPropertySymbols","reduce","targetVal","includes","props","symbols","result","undefined","merge","newComers","_i","base","keys","concatArrays","originVal","concat"],"mappings":"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","sourcesContent":["import { isPlainObject, isArray, isSymbol } from 'is-what';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\nfunction assignProp(carry, key, newVal, originalObject) {\r\n    var propType = originalObject.propertyIsEnumerable(key)\r\n        ? 'enumerable'\r\n        : 'nonenumerable';\r\n    if (propType === 'enumerable')\r\n        carry[key] = newVal;\r\n    if (propType === 'nonenumerable') {\r\n        Object.defineProperty(carry, key, {\r\n            value: newVal,\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true\r\n        });\r\n    }\r\n}\r\nfunction mergeRecursively(origin, newComer, extensions) {\r\n    // work directly on newComer if its not an object\r\n    if (!isPlainObject(newComer)) {\r\n        // extend merge rules\r\n        if (extensions && isArray(extensions)) {\r\n            extensions.forEach(function (extend) {\r\n                newComer = extend(origin, newComer);\r\n            });\r\n        }\r\n        return newComer;\r\n    }\r\n    // define newObject to merge all values upon\r\n    var newObject = {};\r\n    if (isPlainObject(origin)) {\r\n        var props_1 = Object.getOwnPropertyNames(origin);\r\n        var symbols_1 = Object.getOwnPropertySymbols(origin);\r\n        newObject = __spreadArrays(props_1, symbols_1).reduce(function (carry, key) {\r\n            // @ts-ignore\r\n            var targetVal = origin[key];\r\n            if ((!isSymbol(key) && !Object.getOwnPropertyNames(newComer).includes(key)) ||\r\n                (isSymbol(key) && !Object.getOwnPropertySymbols(newComer).includes(key))) {\r\n                assignProp(carry, key, targetVal, origin);\r\n            }\r\n            return carry;\r\n        }, {});\r\n    }\r\n    var props = Object.getOwnPropertyNames(newComer);\r\n    var symbols = Object.getOwnPropertySymbols(newComer);\r\n    var result = __spreadArrays(props, symbols).reduce(function (carry, key) {\r\n        // re-define the origin and newComer as targetVal and newVal\r\n        var newVal = newComer[key];\r\n        var targetVal = (isPlainObject(origin))\r\n            // @ts-ignore\r\n            ? origin[key]\r\n            : undefined;\r\n        // extend merge rules\r\n        if (extensions && isArray(extensions)) {\r\n            extensions.forEach(function (extend) {\r\n                newVal = extend(targetVal, newVal);\r\n            });\r\n        }\r\n        // When newVal is an object do the merge recursively\r\n        if (targetVal !== undefined && isPlainObject(newVal)) {\r\n            newVal = mergeRecursively(targetVal, newVal, extensions);\r\n        }\r\n        assignProp(carry, key, newVal, newComer);\r\n        return carry;\r\n    }, newObject);\r\n    return result;\r\n}\r\n/**\r\n * Merge anything recursively.\r\n * Objects get merged, special objects (classes etc.) are re-assigned \"as is\".\r\n * Basic types overwrite objects or other basic types.\r\n *\r\n * @param {(IConfig | any)} origin\r\n * @param {...any[]} newComers\r\n * @returns the result\r\n */\r\nfunction merge(origin) {\r\n    var newComers = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        newComers[_i - 1] = arguments[_i];\r\n    }\r\n    var extensions = null;\r\n    var base = origin;\r\n    if (isPlainObject(origin) && origin.extensions && Object.keys(origin).length === 1) {\r\n        base = {};\r\n        extensions = origin.extensions;\r\n    }\r\n    return newComers.reduce(function (result, newComer) {\r\n        return mergeRecursively(result, newComer, extensions);\r\n    }, base);\r\n}\n\nfunction concatArrays(originVal, newVal) {\r\n    if (isArray(originVal) && isArray(newVal)) {\r\n        // concat logic\r\n        return originVal.concat(newVal);\r\n    }\r\n    return newVal; // always return newVal as fallback!!\r\n}\n\nexport default merge;\nexport { concatArrays, merge };\n"]},"metadata":{},"sourceType":"module"}