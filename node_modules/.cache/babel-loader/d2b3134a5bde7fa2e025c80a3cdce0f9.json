{"ast":null,"code":"import _regeneratorRuntime from\"/Users/randyadams/notes-app-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/randyadams/notes-app-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/randyadams/notes-app-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"/Users/randyadams/notes-app-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useState}from\"react\";import{FormGroup,FormControl,ControlLabel}from\"react-bootstrap\";import{CardElement,injectStripe}from\"react-stripe-elements\";import LoaderButton from\"./LoaderButton\";import{useFormFields}from\"../libs/hooksLib\";import\"./BillingForm.css\";function BillingForm(_ref){var isLoading=_ref.isLoading,onSubmit=_ref.onSubmit,props=_objectWithoutProperties(_ref,[\"isLoading\",\"onSubmit\"]);var _useFormFields=useFormFields({name:\"\",storage:\"\"}),_useFormFields2=_slicedToArray(_useFormFields,2),fields=_useFormFields2[0],handleFieldChange=_useFormFields2[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isProcessing=_useState2[0],setIsProcessing=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isCardComplete=_useState4[0],setIsCardComplete=_useState4[1];isLoading=isProcessing||isLoading;function validateForm(){return fields.name!==\"\"&&fields.storage!==\"\"&&isCardComplete;}function handleSubmitClick(_x){return _handleSubmitClick.apply(this,arguments);}function _handleSubmitClick(){_handleSubmitClick=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var _yield$props$stripe$c,token,error;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();setIsProcessing(true);_context.next=4;return props.stripe.createToken({name:fields.name});case 4:_yield$props$stripe$c=_context.sent;token=_yield$props$stripe$c.token;error=_yield$props$stripe$c.error;setIsProcessing(false);onSubmit(fields.storage,{token:token,error:error});case 9:case\"end\":return _context.stop();}}},_callee);}));return _handleSubmitClick.apply(this,arguments);}return/*#__PURE__*/React.createElement(\"form\",{className:\"BillingForm\",onSubmit:handleSubmitClick},/*#__PURE__*/React.createElement(FormGroup,{bsSize:\"large\",controlId:\"storage\"},/*#__PURE__*/React.createElement(ControlLabel,null,\"Storage\"),/*#__PURE__*/React.createElement(FormControl,{min:\"0\",type:\"number\",value:fields.storage,onChange:handleFieldChange,placeholder:\"Number of notes to store\"})),/*#__PURE__*/React.createElement(\"hr\",null),/*#__PURE__*/React.createElement(FormGroup,{bsSize:\"large\",controlId:\"name\"},/*#__PURE__*/React.createElement(ControlLabel,null,\"Cardholder's name\"),/*#__PURE__*/React.createElement(FormControl,{type:\"text\",value:fields.name,onChange:handleFieldChange,placeholder:\"Name on the card\"})),/*#__PURE__*/React.createElement(ControlLabel,null,\"Credit Card Info\"),/*#__PURE__*/React.createElement(CardElement,{className:\"card-field\",onChange:function onChange(e){return setIsCardComplete(e.complete);},style:{base:{fontSize:\"18px\",fontFamily:'\"Open Sans\", sans-serif'}}}),/*#__PURE__*/React.createElement(LoaderButton,{block:true,type:\"submit\",bsSize:\"large\",isLoading:isLoading,disabled:!validateForm()},\"Purchase\"));}export default injectStripe(BillingForm);","map":{"version":3,"sources":["/Users/randyadams/notes-app-client/src/components/BillingForm.js"],"names":["React","useState","FormGroup","FormControl","ControlLabel","CardElement","injectStripe","LoaderButton","useFormFields","BillingForm","isLoading","onSubmit","props","name","storage","fields","handleFieldChange","isProcessing","setIsProcessing","isCardComplete","setIsCardComplete","validateForm","handleSubmitClick","event","preventDefault","stripe","createToken","token","error","e","complete","base","fontSize","fontFamily"],"mappings":"qnBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,SAAT,CAAoBC,WAApB,CAAiCC,YAAjC,KAAqD,iBAArD,CACA,OAASC,WAAT,CAAsBC,YAAtB,KAA0C,uBAA1C,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,MAAO,mBAAP,CAEA,QAASC,CAAAA,WAAT,MAAwD,IAAjCC,CAAAA,SAAiC,MAAjCA,SAAiC,CAAtBC,QAAsB,MAAtBA,QAAsB,CAATC,KAAS,4EAClBJ,aAAa,CAAC,CAChDK,IAAI,CAAE,EAD0C,CAEhDC,OAAO,CAAE,EAFuC,CAAD,CADK,kDAC/CC,MAD+C,oBACvCC,iBADuC,kCAKdf,QAAQ,CAAC,KAAD,CALM,wCAK/CgB,YAL+C,eAKjCC,eALiC,8BAMVjB,QAAQ,CAAC,KAAD,CANE,yCAM/CkB,cAN+C,eAM/BC,iBAN+B,eAQtDV,SAAS,CAAGO,YAAY,EAAIP,SAA5B,CAEA,QAASW,CAAAA,YAAT,EAAwB,CACtB,MACEN,CAAAA,MAAM,CAACF,IAAP,GAAgB,EAAhB,EACAE,MAAM,CAACD,OAAP,GAAmB,EADnB,EAEAK,cAHF,CAKD,CAhBqD,QAkBvCG,CAAAA,iBAlBuC,+JAkBtD,iBAAiCC,KAAjC,wJACEA,KAAK,CAACC,cAAN,GAEAN,eAAe,CAAC,IAAD,CAAf,CAHF,sBAKiCN,CAAAA,KAAK,CAACa,MAAN,CAAaC,WAAb,CAAyB,CAAEb,IAAI,CAAEE,MAAM,CAACF,IAAf,CAAzB,CALjC,4CAKUc,KALV,uBAKUA,KALV,CAKiBC,KALjB,uBAKiBA,KALjB,CAOEV,eAAe,CAAC,KAAD,CAAf,CAEAP,QAAQ,CAACI,MAAM,CAACD,OAAR,CAAiB,CAAEa,KAAK,CAALA,KAAF,CAASC,KAAK,CAALA,KAAT,CAAjB,CAAR,CATF,sDAlBsD,oDA8BtD,mBACE,4BAAM,SAAS,CAAC,aAAhB,CAA8B,QAAQ,CAAEN,iBAAxC,eACE,oBAAC,SAAD,EAAW,MAAM,CAAC,OAAlB,CAA0B,SAAS,CAAC,SAApC,eACE,oBAAC,YAAD,gBADF,cAEE,oBAAC,WAAD,EACE,GAAG,CAAC,GADN,CAEE,IAAI,CAAC,QAFP,CAGE,KAAK,CAAEP,MAAM,CAACD,OAHhB,CAIE,QAAQ,CAAEE,iBAJZ,CAKE,WAAW,CAAC,0BALd,EAFF,CADF,cAWE,8BAXF,cAYE,oBAAC,SAAD,EAAW,MAAM,CAAC,OAAlB,CAA0B,SAAS,CAAC,MAApC,eACE,oBAAC,YAAD,0BADF,cAEE,oBAAC,WAAD,EACE,IAAI,CAAC,MADP,CAEE,KAAK,CAAED,MAAM,CAACF,IAFhB,CAGE,QAAQ,CAAEG,iBAHZ,CAIE,WAAW,CAAC,kBAJd,EAFF,CAZF,cAqBE,oBAAC,YAAD,yBArBF,cAsBE,oBAAC,WAAD,EACE,SAAS,CAAC,YADZ,CAEE,QAAQ,CAAE,kBAAAa,CAAC,QAAIT,CAAAA,iBAAiB,CAACS,CAAC,CAACC,QAAH,CAArB,EAFb,CAGE,KAAK,CAAE,CACLC,IAAI,CAAE,CAAEC,QAAQ,CAAE,MAAZ,CAAoBC,UAAU,CAAE,yBAAhC,CADD,CAHT,EAtBF,cA6BE,oBAAC,YAAD,EACE,KAAK,KADP,CAEE,IAAI,CAAC,QAFP,CAGE,MAAM,CAAC,OAHT,CAIE,SAAS,CAAEvB,SAJb,CAKE,QAAQ,CAAE,CAACW,YAAY,EALzB,aA7BF,CADF,CAyCD,CAED,cAAef,CAAAA,YAAY,CAACG,WAAD,CAA3B","sourcesContent":["import React, { useState } from \"react\";\nimport { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { CardElement, injectStripe } from \"react-stripe-elements\";\nimport LoaderButton from \"./LoaderButton\";\nimport { useFormFields } from \"../libs/hooksLib\";\nimport \"./BillingForm.css\";\n\nfunction BillingForm({ isLoading, onSubmit, ...props }) {\n  const [fields, handleFieldChange] = useFormFields({\n    name: \"\",\n    storage: \"\"\n  });\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isCardComplete, setIsCardComplete] = useState(false);\n\n  isLoading = isProcessing || isLoading;\n\n  function validateForm() {\n    return (\n      fields.name !== \"\" &&\n      fields.storage !== \"\" &&\n      isCardComplete\n    );\n  }\n\n  async function handleSubmitClick(event) {\n    event.preventDefault();\n\n    setIsProcessing(true);\n\n    const { token, error } = await props.stripe.createToken({ name: fields.name });\n\n    setIsProcessing(false);\n\n    onSubmit(fields.storage, { token, error });\n  }\n\n  return (\n    <form className=\"BillingForm\" onSubmit={handleSubmitClick}>\n      <FormGroup bsSize=\"large\" controlId=\"storage\">\n        <ControlLabel>Storage</ControlLabel>\n        <FormControl\n          min=\"0\"\n          type=\"number\"\n          value={fields.storage}\n          onChange={handleFieldChange}\n          placeholder=\"Number of notes to store\"\n        />\n      </FormGroup>\n      <hr />\n      <FormGroup bsSize=\"large\" controlId=\"name\">\n        <ControlLabel>Cardholder&apos;s name</ControlLabel>\n        <FormControl\n          type=\"text\"\n          value={fields.name}\n          onChange={handleFieldChange}\n          placeholder=\"Name on the card\"\n        />\n      </FormGroup>\n      <ControlLabel>Credit Card Info</ControlLabel>\n      <CardElement\n        className=\"card-field\"\n        onChange={e => setIsCardComplete(e.complete)}\n        style={{\n          base: { fontSize: \"18px\", fontFamily: '\"Open Sans\", sans-serif' }\n        }}\n      />\n      <LoaderButton\n        block\n        type=\"submit\"\n        bsSize=\"large\"\n        isLoading={isLoading}\n        disabled={!validateForm()}\n      >\n        Purchase\n      </LoaderButton>\n    </form>\n  );\n}\n\nexport default injectStripe(BillingForm);\n"]},"metadata":{},"sourceType":"module"}