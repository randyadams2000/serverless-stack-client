{"ast":null,"code":"var _jsxFileName = \"/Users/randyadams/IMMORTIFYV2/immortify-app-client/src/containers/Record.js\";\nimport React from \"react\";\nimport \"react-router-dom\"; //import { API, Storage } from \"aws-amplify\";\n//import { onError } from \"../libs/errorLib\";\n//import { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\n//import LoaderButton from \"../components/LoaderButton\";\n\nimport { PageHeader } from \"react-bootstrap\";\nimport \"./Record.css\"; //import { s3Upload } from \"../libs/awsLib\";\n\nexport default function Record() {\n  AWS.config.region = 'us-east-1'; // 1. Enter your region\n\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'us-east-1:7ea26b5d-926b-44fd-8936-f8bec3c89452' // 2. Enter your identity pool\n\n  });\n  AWS.config.credentials.get(function (err) {\n    if (err) alert(err);\n    console.log(AWS.config.credentials);\n  });\n  var bucketName = 'appmaistersupload'; // Enter your bucket name+\n\n  var bucket = new AWS.S3({\n    params: {\n      Bucket: bucketName\n    }\n  });\n  var fileChooser = document.getElementById('file-chooser');\n  var button = document.getElementById('upload-button');\n  var results = document.getElementById('results');\n  var percentage = document.getElementById('percentage');\n  var cancelUpload = document.getElementById('cancel-button');\n\n  function dataURLtoFile(dataurl, filename) {\n    var arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new File([u8arr], filename, {\n      type: mime\n    });\n  } // Store a reference of the preview video element and a global reference to the recorder instance\n\n\n  var video = document.getElementById('my-preview');\n  var recorder; // When the user clicks on start video recording\n\n  document.getElementById('btn-start-recording').addEventListener(\"click\", function () {\n    // Disable start recording button\n    this.disabled = true; // Request access to the media devices\n\n    navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    }).then(function (stream) {\n      // Display a live preview on the video element of the page\n      setSrcObject(stream, video); // Start to display the preview on the video element\n      // and mute the video to disable the echo issue !\n\n      video.play();\n      video.muted = true; // Initialize the recorder\n\n      recorder = new RecordRTCPromisesHandler(stream, {\n        mimeType: 'video/webm',\n        bitsPerSecond: 128000\n      }); // Start recording the video\n\n      recorder.startRecording().then(function () {\n        console.info('Recording video ...');\n      }).catch(function (error) {\n        console.log(error);\n        console.error('Cannot start video recording: ', error);\n      }); // release stream on stopRecording\n\n      recorder.stream = stream; // Enable stop recording button\n\n      document.getElementById('btn-stop-recording').disabled = false;\n    }).catch(function (error) {\n      console.log(error);\n      console.error(\"Cannot access media devices: \", error);\n    });\n  }, false); // When the user clicks on Stop video recording\n\n  document.getElementById('btn-stop-recording').addEventListener(\"click\", function () {\n    this.disabled = true;\n    recorder.stopRecording().then(function () {\n      console.info('stopRecording success');\n      var DataUrl = recorder.getDataURL();\n      var random = Math.random();\n      DataUrl.then(function (result) {\n        var url_file = dataURLtoFile(result, random + '.webm');\n        var objKey = 'testing/' + url_file.name;\n        var params = {\n          Key: objKey,\n          ContentType: url_file.type,\n          Body: url_file,\n          ACL: 'public-read'\n        }; // bucket.putObject(params, function(err, data) {\n        //     if (err) {\n        //         results.innerHTML = 'ERROR: ' + err;\n        //     } else {\n        //         listObjs();\n        //     }\n        // });\n\n        var request = bucket.putObject(params);\n        request.on('httpUploadProgress', function (progress) {\n          percentage.innerHTML = parseInt(progress.loaded * 100 / progress.total) + '%';\n          console.log(\"Uploaded :: \" + parseInt(progress.loaded * 100 / progress.total) + '%'); // console.log(progress.loaded + \" of \" + progress.total + \" bytes\");\n        }).send(function (err, data) {\n          percentage.innerHTML = \"File has been uploaded successfully.\";\n        });\n        cancelUpload.addEventListener('click', function () {\n          if (request.abort()) {\n            percentage.innerHTML = \"Uploading has been canceled.\";\n          }\n        }); // here you can use the result of promiseB\n      }); // Retrieve recorded video as blob and display in the preview element\n\n      /* var videoBlob = recorder.getBlob();\n        var blobUrl = URL.createObjectURL(videoBlob);\n        console.log(\"Blob url\" + blobUrl);\n         video.srcObject = videoBlob*/\n      //  video.src = URL.createObjectURL(videoBlob);\n\n      video.play(); // Unmute video on preview\n\n      video.muted = false; // Stop the device streaming\n\n      recorder.stream.stop(); // Enable record button again !\n\n      document.getElementById('btn-start-recording').disabled = false;\n    }).catch(function (error) {\n      console.error('stopRecording failure', error);\n    });\n  }, false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Notes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 3\n    }\n  }, \"Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"btn-start-recording\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 3\n    }\n  }, \"Start Recording\"), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: \"disabled\",\n    id: \"btn-stop-recording\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 3\n    }\n  }, \"Stop Recording\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"cancel-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 3\n    }\n  }, \"Cancel Upload\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    autoplay: \"\",\n    controls: \"\",\n    id: \"my-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"percentage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 3\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/randyadams/IMMORTIFYV2/immortify-app-client/src/containers/Record.js"],"names":["React","PageHeader","Record","AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","get","err","alert","console","log","bucketName","bucket","S3","params","Bucket","fileChooser","document","getElementById","button","results","percentage","cancelUpload","dataURLtoFile","dataurl","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","video","recorder","addEventListener","disabled","navigator","mediaDevices","getUserMedia","audio","then","stream","setSrcObject","play","muted","RecordRTCPromisesHandler","mimeType","bitsPerSecond","startRecording","info","catch","error","stopRecording","DataUrl","getDataURL","random","Math","result","url_file","objKey","name","Key","ContentType","Body","ACL","request","putObject","on","progress","innerHTML","parseInt","loaded","total","send","data","abort","stop"],"mappings":"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","sourcesContent":["import React, {} from \"react\";\nimport {  } from \"react-router-dom\";\n//import { API, Storage } from \"aws-amplify\";\n//import { onError } from \"../libs/errorLib\";\n//import { FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\n//import LoaderButton from \"../components/LoaderButton\";\nimport { PageHeader } from \"react-bootstrap\";\nimport \"./Record.css\";\n//import { s3Upload } from \"../libs/awsLib\";\n\n\n\n\n\nexport default function Record() {\n\n\n\n\n  AWS.config.region = 'us-east-1'; // 1. Enter your region\n\n  AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: 'us-east-1:7ea26b5d-926b-44fd-8936-f8bec3c89452' // 2. Enter your identity pool\n  });\n  \n  AWS.config.credentials.get(function(err) {\n      if (err) alert(err);\n      console.log(AWS.config.credentials);\n  });\n\n  var bucketName = 'appmaistersupload'; // Enter your bucket name+\n\n  var bucket = new AWS.S3({\n      params: {\n          Bucket: bucketName\n      }\n  });\n\n  var fileChooser = document.getElementById('file-chooser');\n  var button = document.getElementById('upload-button');\n  var results = document.getElementById('results');\n  var percentage = document.getElementById('percentage');\n  var cancelUpload = document.getElementById('cancel-button');\n\nfunction dataURLtoFile(dataurl, filename) {\n  var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n  while(n--){\n      u8arr[n] = bstr.charCodeAt(n);\n  }\n  return new File([u8arr], filename, {type:mime});\n}\n// Store a reference of the preview video element and a global reference to the recorder instance\nvar video = document.getElementById('my-preview');\nvar recorder;\n\n// When the user clicks on start video recording\ndocument.getElementById('btn-start-recording').addEventListener(\"click\", function(){\n// Disable start recording button\nthis.disabled = true;\n\n// Request access to the media devices\nnavigator.mediaDevices.getUserMedia({\n  audio: true, \n  video: true\n}).then(function(stream) {\n  // Display a live preview on the video element of the page\n  setSrcObject(stream, video);\n\n  // Start to display the preview on the video element\n  // and mute the video to disable the echo issue !\n  video.play();\n  video.muted = true;\n\n  // Initialize the recorder\n  recorder = new RecordRTCPromisesHandler(stream, {\n      mimeType: 'video/webm',\n      bitsPerSecond: 128000\n  });\n\n  // Start recording the video\n  recorder.startRecording().then(function() {\n      console.info('Recording video ...');\n  }).catch(function(error) {\n      console.log(error);\n      console.error('Cannot start video recording: ', error);\n  });\n\n  // release stream on stopRecording\n  recorder.stream = stream;\n\n  // Enable stop recording button\n  document.getElementById('btn-stop-recording').disabled = false;\n}).catch(function(error) {\n         console.log(error);\n  console.error(\"Cannot access media devices: \", error);\n});\n}, false);\n\n// When the user clicks on Stop video recording\ndocument.getElementById('btn-stop-recording').addEventListener(\"click\", function(){\nthis.disabled = true;\n\nrecorder.stopRecording().then(function() {\n  console.info('stopRecording success');\n\n var DataUrl = recorder.getDataURL();\n var random = Math.random( ); \n DataUrl.then(function(result) {\n\n      var url_file = dataURLtoFile(result, random +'.webm');\n\nvar objKey = 'testing/' + url_file.name;\n  var params = {\n      Key: objKey,\n      ContentType: url_file.type,\n      Body: url_file,\n      ACL: 'public-read'\n  };\n\n  // bucket.putObject(params, function(err, data) {\n  //     if (err) {\n  //         results.innerHTML = 'ERROR: ' + err;\n  //     } else {\n  //         listObjs();\n  //     }\n  // });\n  var request = bucket.putObject(params);\n\n  request.on('httpUploadProgress', function (progress) {\n      percentage.innerHTML = parseInt((progress.loaded * 100) / progress.total)+'%'; \n      console.log(\"Uploaded :: \" + parseInt((progress.loaded * 100) / progress.total)+'%');\n     // console.log(progress.loaded + \" of \" + progress.total + \" bytes\");\n  }).send(function(err, data){\n      percentage.innerHTML = \"File has been uploaded successfully.\";\n  });\n\n\n    cancelUpload.addEventListener('click', function() {\n          if(request.abort()){\n              percentage.innerHTML = \"Uploading has been canceled.\";\n          }\n      });\n\n\n \n// here you can use the result of promiseB\n});\n \n  // Retrieve recorded video as blob and display in the preview element\n /* var videoBlob = recorder.getBlob();\n\n  var blobUrl = URL.createObjectURL(videoBlob);\n\n  console.log(\"Blob url\" + blobUrl);\n\n   video.srcObject = videoBlob*/\n//  video.src = URL.createObjectURL(videoBlob);\n  video.play();\n\n  // Unmute video on preview\n  video.muted = false;\n\n  // Stop the device streaming\n  recorder.stream.stop();\n\n  // Enable record button again !\n  document.getElementById('btn-start-recording').disabled = false;\n}).catch(function(error) {\n  console.error('stopRecording failure', error);\n});\n}, false);\n\n\n\n\n\n\n\nreturn (\n  <div className=\"Notes\">\n  <PageHeader>Record</PageHeader>\n  <button id=\"btn-start-recording\">\n      Start Recording\n  </button>\n  <button disabled=\"disabled\" id=\"btn-stop-recording\">\n      Stop Recording\n  </button>\n  <button id=\"cancel-button\">\n      Cancel Upload\n  </button>\n  <hr/>\n  <video autoplay=\"\" controls=\"\" id=\"my-preview\">\n  </video>\n  <p id=\"percentage\">\n  </p>\n</div>\n);\n}"]},"metadata":{},"sourceType":"module"}