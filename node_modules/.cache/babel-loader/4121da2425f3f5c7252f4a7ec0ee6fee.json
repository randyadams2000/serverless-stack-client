{"ast":null,"code":"/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */function getType(payload){return Object.prototype.toString.call(payload).slice(8,-1);}/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */function isUndefined(payload){return getType(payload)==='Undefined';}/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */function isNull(payload){return getType(payload)==='Null';}/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Record<string, any>}\r\n */function isPlainObject(payload){if(getType(payload)!=='Object')return false;return payload.constructor===Object&&Object.getPrototypeOf(payload)===Object.prototype;}/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Record<string, any>}\r\n */function isObject(payload){return isPlainObject(payload);}/**\r\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is { [K in any]: never }}\r\n */function isEmptyObject(payload){return isPlainObject(payload)&&Object.keys(payload).length===0;}/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Record<string, any>}\r\n */function isAnyObject(payload){return getType(payload)==='Object';}/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */function isObjectLike(payload){return isAnyObject(payload);}/**\r\n * Returns whether the payload is a function (regular or async)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is AnyFunction}\r\n */function isFunction(payload){return typeof payload===\"function\";}/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {any} payload\r\n * @returns {payload is any[]}\r\n */function isArray(payload){return getType(payload)==='Array';}/**\r\n * Returns whether the payload is a an array with at least 1 item\r\n *\r\n * @param {*} payload\r\n * @returns {payload is any[]}\r\n */function isFullArray(payload){return isArray(payload)&&payload.length>0;}/**\r\n * Returns whether the payload is a an empty array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is []}\r\n */function isEmptyArray(payload){return isArray(payload)&&payload.length===0;}/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */function isString(payload){return getType(payload)==='String';}/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */function isFullString(payload){return isString(payload)&&payload!=='';}/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */function isEmptyString(payload){return payload==='';}/**\r\n * Returns whether the payload is a number (but not NaN)\r\n *\r\n * This will return `false` for `NaN`!!\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */function isNumber(payload){return getType(payload)==='Number'&&!isNaN(payload);}/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */function isBoolean(payload){return getType(payload)==='Boolean';}/**\r\n * Returns whether the payload is a regular expression (RegExp)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */function isRegExp(payload){return getType(payload)==='RegExp';}/**\r\n * Returns whether the payload is a Map\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Map<any, any>}\r\n */function isMap(payload){return getType(payload)==='Map';}/**\r\n * Returns whether the payload is a WeakMap\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakMap<any, any>}\r\n */function isWeakMap(payload){return getType(payload)==='WeakMap';}/**\r\n * Returns whether the payload is a Set\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Set<any>}\r\n */function isSet(payload){return getType(payload)==='Set';}/**\r\n * Returns whether the payload is a WeakSet\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakSet<any>}\r\n */function isWeakSet(payload){return getType(payload)==='WeakSet';}/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is symbol}\r\n */function isSymbol(payload){return getType(payload)==='Symbol';}/**\r\n * Returns whether the payload is a Date, and that the date is valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */function isDate(payload){return getType(payload)==='Date'&&!isNaN(payload);}/**\r\n * Returns whether the payload is a Blob\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Blob}\r\n */function isBlob(payload){return getType(payload)==='Blob';}/**\r\n * Returns whether the payload is a File\r\n *\r\n * @param {*} payload\r\n * @returns {payload is File}\r\n */function isFile(payload){return getType(payload)==='File';}/**\r\n * Returns whether the payload is a Promise\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Promise<any>}\r\n */function isPromise(payload){return getType(payload)==='Promise';}/**\r\n * Returns whether the payload is an Error\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Error}\r\n */function isError(payload){return getType(payload)==='Error';}/**\r\n * Returns whether the payload is literally the value `NaN` (it's `NaN` and also a `number`)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is typeof NaN}\r\n */function isNaNValue(payload){return getType(payload)==='Number'&&isNaN(payload);}/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\r\n */function isPrimitive(payload){return isBoolean(payload)||isNull(payload)||isUndefined(payload)||isNumber(payload)||isString(payload)||isSymbol(payload);}/**\r\n * Returns true whether the payload is null or undefined\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is null | undefined)}\r\n */function isNullOrUndefined(payload){return isNull(payload)||isUndefined(payload);}/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */function isType(payload,type){if(!(type instanceof Function)){throw new TypeError('Type must be a function');}if(!Object.prototype.hasOwnProperty.call(type,'prototype')){throw new TypeError('Type is not a class');}// Classes usually have names (as functions usually have names)\nvar name=type.name;return getType(payload)===name||Boolean(payload&&payload.constructor===type);}export{getType,isAnyObject,isArray,isBlob,isBoolean,isDate,isEmptyArray,isEmptyObject,isEmptyString,isError,isFile,isFullArray,isFullString,isFunction,isMap,isNaNValue,isNull,isNullOrUndefined,isNumber,isObject,isObjectLike,isPlainObject,isPrimitive,isPromise,isRegExp,isSet,isString,isSymbol,isType,isUndefined,isWeakMap,isWeakSet};","map":{"version":3,"sources":["/Users/randyadams/IMMORTIFYV2/immortify-app-client/src/react-video-recorder-master/node_modules/is-what/dist/index.esm.js"],"names":["getType","payload","Object","prototype","toString","call","slice","isUndefined","isNull","isPlainObject","constructor","getPrototypeOf","isObject","isEmptyObject","keys","length","isAnyObject","isObjectLike","isFunction","isArray","isFullArray","isEmptyArray","isString","isFullString","isEmptyString","isNumber","isNaN","isBoolean","isRegExp","isMap","isWeakMap","isSet","isWeakSet","isSymbol","isDate","isBlob","isFile","isPromise","isError","isNaNValue","isPrimitive","isNullOrUndefined","isType","type","Function","TypeError","hasOwnProperty","name","Boolean"],"mappings":"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","sourcesContent":["/**\r\n * Returns the object type of the given payload\r\n *\r\n * @param {*} payload\r\n * @returns {string}\r\n */\r\nfunction getType(payload) {\r\n    return Object.prototype.toString.call(payload).slice(8, -1);\r\n}\r\n/**\r\n * Returns whether the payload is undefined\r\n *\r\n * @param {*} payload\r\n * @returns {payload is undefined}\r\n */\r\nfunction isUndefined(payload) {\r\n    return getType(payload) === 'Undefined';\r\n}\r\n/**\r\n * Returns whether the payload is null\r\n *\r\n * @param {*} payload\r\n * @returns {payload is null}\r\n */\r\nfunction isNull(payload) {\r\n    return getType(payload) === 'Null';\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Record<string, any>}\r\n */\r\nfunction isPlainObject(payload) {\r\n    if (getType(payload) !== 'Object')\r\n        return false;\r\n    return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;\r\n}\r\n/**\r\n * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Record<string, any>}\r\n */\r\nfunction isObject(payload) {\r\n    return isPlainObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a an empty object (excluding special classes or objects with other prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is { [K in any]: never }}\r\n */\r\nfunction isEmptyObject(payload) {\r\n    return isPlainObject(payload) && Object.keys(payload).length === 0;\r\n}\r\n/**\r\n * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Record<string, any>}\r\n */\r\nfunction isAnyObject(payload) {\r\n    return getType(payload) === 'Object';\r\n}\r\n/**\r\n * Returns whether the payload is an object like a type passed in < >\r\n *\r\n * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.\r\n *\r\n * @template T this must be passed in < >\r\n * @param {*} payload\r\n * @returns {payload is T}\r\n */\r\nfunction isObjectLike(payload) {\r\n    return isAnyObject(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a function (regular or async)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is AnyFunction}\r\n */\r\nfunction isFunction(payload) {\r\n    return typeof payload === \"function\";\r\n}\r\n/**\r\n * Returns whether the payload is an array\r\n *\r\n * @param {any} payload\r\n * @returns {payload is any[]}\r\n */\r\nfunction isArray(payload) {\r\n    return getType(payload) === 'Array';\r\n}\r\n/**\r\n * Returns whether the payload is a an array with at least 1 item\r\n *\r\n * @param {*} payload\r\n * @returns {payload is any[]}\r\n */\r\nfunction isFullArray(payload) {\r\n    return isArray(payload) && payload.length > 0;\r\n}\r\n/**\r\n * Returns whether the payload is a an empty array\r\n *\r\n * @param {*} payload\r\n * @returns {payload is []}\r\n */\r\nfunction isEmptyArray(payload) {\r\n    return isArray(payload) && payload.length === 0;\r\n}\r\n/**\r\n * Returns whether the payload is a string\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isString(payload) {\r\n    return getType(payload) === 'String';\r\n}\r\n/**\r\n * Returns whether the payload is a string, BUT returns false for ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isFullString(payload) {\r\n    return isString(payload) && payload !== '';\r\n}\r\n/**\r\n * Returns whether the payload is ''\r\n *\r\n * @param {*} payload\r\n * @returns {payload is string}\r\n */\r\nfunction isEmptyString(payload) {\r\n    return payload === '';\r\n}\r\n/**\r\n * Returns whether the payload is a number (but not NaN)\r\n *\r\n * This will return `false` for `NaN`!!\r\n *\r\n * @param {*} payload\r\n * @returns {payload is number}\r\n */\r\nfunction isNumber(payload) {\r\n    return getType(payload) === 'Number' && !isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a boolean\r\n *\r\n * @param {*} payload\r\n * @returns {payload is boolean}\r\n */\r\nfunction isBoolean(payload) {\r\n    return getType(payload) === 'Boolean';\r\n}\r\n/**\r\n * Returns whether the payload is a regular expression (RegExp)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is RegExp}\r\n */\r\nfunction isRegExp(payload) {\r\n    return getType(payload) === 'RegExp';\r\n}\r\n/**\r\n * Returns whether the payload is a Map\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Map<any, any>}\r\n */\r\nfunction isMap(payload) {\r\n    return getType(payload) === 'Map';\r\n}\r\n/**\r\n * Returns whether the payload is a WeakMap\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakMap<any, any>}\r\n */\r\nfunction isWeakMap(payload) {\r\n    return getType(payload) === 'WeakMap';\r\n}\r\n/**\r\n * Returns whether the payload is a Set\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Set<any>}\r\n */\r\nfunction isSet(payload) {\r\n    return getType(payload) === 'Set';\r\n}\r\n/**\r\n * Returns whether the payload is a WeakSet\r\n *\r\n * @param {*} payload\r\n * @returns {payload is WeakSet<any>}\r\n */\r\nfunction isWeakSet(payload) {\r\n    return getType(payload) === 'WeakSet';\r\n}\r\n/**\r\n * Returns whether the payload is a Symbol\r\n *\r\n * @param {*} payload\r\n * @returns {payload is symbol}\r\n */\r\nfunction isSymbol(payload) {\r\n    return getType(payload) === 'Symbol';\r\n}\r\n/**\r\n * Returns whether the payload is a Date, and that the date is valid\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Date}\r\n */\r\nfunction isDate(payload) {\r\n    return getType(payload) === 'Date' && !isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a Blob\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Blob}\r\n */\r\nfunction isBlob(payload) {\r\n    return getType(payload) === 'Blob';\r\n}\r\n/**\r\n * Returns whether the payload is a File\r\n *\r\n * @param {*} payload\r\n * @returns {payload is File}\r\n */\r\nfunction isFile(payload) {\r\n    return getType(payload) === 'File';\r\n}\r\n/**\r\n * Returns whether the payload is a Promise\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Promise<any>}\r\n */\r\nfunction isPromise(payload) {\r\n    return getType(payload) === 'Promise';\r\n}\r\n/**\r\n * Returns whether the payload is an Error\r\n *\r\n * @param {*} payload\r\n * @returns {payload is Error}\r\n */\r\nfunction isError(payload) {\r\n    return getType(payload) === 'Error';\r\n}\r\n/**\r\n * Returns whether the payload is literally the value `NaN` (it's `NaN` and also a `number`)\r\n *\r\n * @param {*} payload\r\n * @returns {payload is typeof NaN}\r\n */\r\nfunction isNaNValue(payload) {\r\n    return getType(payload) === 'Number' && isNaN(payload);\r\n}\r\n/**\r\n * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is boolean | null | undefined | number | string | symbol)}\r\n */\r\nfunction isPrimitive(payload) {\r\n    return (isBoolean(payload) ||\r\n        isNull(payload) ||\r\n        isUndefined(payload) ||\r\n        isNumber(payload) ||\r\n        isString(payload) ||\r\n        isSymbol(payload));\r\n}\r\n/**\r\n * Returns true whether the payload is null or undefined\r\n *\r\n * @param {*} payload\r\n * @returns {(payload is null | undefined)}\r\n */\r\nfunction isNullOrUndefined(payload) {\r\n    return isNull(payload) || isUndefined(payload);\r\n}\r\n/**\r\n * Does a generic check to check that the given payload is of a given type.\r\n * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);\r\n * It will, however, differentiate between object and null\r\n *\r\n * @template T\r\n * @param {*} payload\r\n * @param {T} type\r\n * @throws {TypeError} Will throw type error if type is an invalid type\r\n * @returns {payload is T}\r\n */\r\nfunction isType(payload, type) {\r\n    if (!(type instanceof Function)) {\r\n        throw new TypeError('Type must be a function');\r\n    }\r\n    if (!Object.prototype.hasOwnProperty.call(type, 'prototype')) {\r\n        throw new TypeError('Type is not a class');\r\n    }\r\n    // Classes usually have names (as functions usually have names)\r\n    var name = type.name;\r\n    return getType(payload) === name || Boolean(payload && payload.constructor === type);\r\n}\n\nexport { getType, isAnyObject, isArray, isBlob, isBoolean, isDate, isEmptyArray, isEmptyObject, isEmptyString, isError, isFile, isFullArray, isFullString, isFunction, isMap, isNaNValue, isNull, isNullOrUndefined, isNumber, isObject, isObjectLike, isPlainObject, isPrimitive, isPromise, isRegExp, isSet, isString, isSymbol, isType, isUndefined, isWeakMap, isWeakSet };\n"]},"metadata":{},"sourceType":"module"}