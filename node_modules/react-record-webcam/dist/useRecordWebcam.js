"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.useRecordWebcam = void 0;
var react_1 = __importDefault(require("react"));
var record_1 = __importDefault(require("./record"));
var utils_1 = require("./utils");
var types_1 = require("./types");
var DEFAULT_OPTIONS = Object.freeze({
    type: 'video',
    mimeType: 'video/mp4',
    video: {
        minWidth: 1280,
        minHeight: 720,
        maxWidth: 1920,
        maxHeight: 1080,
        minAspectRatio: 1.77
    }
});
function useRecordWebcam(args) {
    var _this = this;
    var webcamRef = react_1["default"].useRef(null);
    var previewRef = react_1["default"].useRef(null);
    var _a = react_1["default"].useState(types_1.CAMERA_STATUS.CLOSED), status = _a[0], setStatus = _a[1];
    var _b = react_1["default"].useState(null), recorder = _b[0], setRecorder = _b[1];
    var openCamera = function () { return __awaiter(_this, void 0, void 0, function () {
        var recorderInit;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, record_1["default"]((args === null || args === void 0 ? void 0 : args.options) || DEFAULT_OPTIONS)];
                case 1:
                    recorderInit = _a.sent();
                    setRecorder(recorderInit);
                    if (webcamRef === null || webcamRef === void 0 ? void 0 : webcamRef.current) {
                        webcamRef.current.srcObject = recorderInit.stream;
                    }
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 1700); })];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); };
    var stopStream = function () {
        if (recorder === null || recorder === void 0 ? void 0 : recorder.stream.id)
            recorder.stream.stop();
    };
    var close = function () {
        if (previewRef === null || previewRef === void 0 ? void 0 : previewRef.current) {
            previewRef.current.removeAttribute('src');
            previewRef.current.load();
        }
        setStatus(types_1.CAMERA_STATUS.CLOSED);
        stopStream();
    };
    var open = function () { return __awaiter(_this, void 0, void 0, function () {
        var error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    setStatus(types_1.CAMERA_STATUS.INIT);
                    return [4 /*yield*/, openCamera()];
                case 1:
                    _a.sent();
                    setStatus(types_1.CAMERA_STATUS.OPEN);
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    setStatus(types_1.CAMERA_STATUS.ERROR);
                    console.error({ error: error_1 });
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    var stop = function () { return __awaiter(_this, void 0, void 0, function () {
        var blob, preview, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 4, , 5]);
                    if (!(recorder === null || recorder === void 0 ? void 0 : recorder.stopRecording)) return [3 /*break*/, 3];
                    return [4 /*yield*/, recorder.stopRecording()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, recorder.getBlob()];
                case 2:
                    blob = _a.sent();
                    preview = window.URL.createObjectURL(blob);
                    if (previewRef.current) {
                        previewRef.current.src = preview;
                    }
                    stopStream();
                    setStatus(types_1.CAMERA_STATUS.PREVIEW);
                    return [2 /*return*/];
                case 3: throw new Error('Stop recording error!');
                case 4:
                    error_2 = _a.sent();
                    setStatus(types_1.CAMERA_STATUS.ERROR);
                    console.error({ error: error_2 });
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    }); };
    var start = function () { return __awaiter(_this, void 0, void 0, function () {
        var length_1, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 6, , 7]);
                    if (!(recorder === null || recorder === void 0 ? void 0 : recorder.startRecording)) return [3 /*break*/, 5];
                    return [4 /*yield*/, recorder.startRecording()];
                case 1:
                    _a.sent();
                    setStatus(types_1.CAMERA_STATUS.RECORDING);
                    if (!(args === null || args === void 0 ? void 0 : args.recordingLength)) return [3 /*break*/, 4];
                    length_1 = args.recordingLength * 1000;
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, length_1); })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, stop()];
                case 3:
                    _a.sent();
                    stopStream();
                    _a.label = 4;
                case 4: return [2 /*return*/];
                case 5: throw new Error('Recorder not initialized!');
                case 6:
                    error_3 = _a.sent();
                    setStatus(types_1.CAMERA_STATUS.ERROR);
                    console.error({ error: error_3 });
                    return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    }); };
    var retake = function () { return __awaiter(_this, void 0, void 0, function () {
        var error_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, open()];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    error_4 = _a.sent();
                    setStatus(types_1.CAMERA_STATUS.ERROR);
                    console.error({ error: error_4 });
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    var download = function () { return __awaiter(_this, void 0, void 0, function () {
        var blob, filename, error_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    if (!(recorder === null || recorder === void 0 ? void 0 : recorder.getBlob)) return [3 /*break*/, 2];
                    return [4 /*yield*/, recorder.getBlob()];
                case 1:
                    blob = _a.sent();
                    filename = (args === null || args === void 0 ? void 0 : args.downloadFileName) ? args.downloadFileName + ".mp4"
                        : new Date().getTime() + ".mp4";
                    utils_1.saveFile(filename, blob);
                    return [2 /*return*/];
                case 2: throw new Error('Error downloading file!');
                case 3:
                    error_5 = _a.sent();
                    setStatus(types_1.CAMERA_STATUS.ERROR);
                    console.error({ error: error_5 });
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); };
    return {
        webcamRef: webcamRef,
        previewRef: previewRef,
        status: status,
        stopStream: stopStream,
        close: close,
        open: open,
        stop: stop,
        start: start,
        retake: retake,
        download: download
    };
}
exports.useRecordWebcam = useRecordWebcam;
//# sourceMappingURL=useRecordWebcam.js.map