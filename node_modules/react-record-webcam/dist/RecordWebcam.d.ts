import React from 'react';
import { RecorderOptions, Recorder, CAMERA_STATUS, BUTTON_LABELS, NAMESPACES } from './types';
declare type RenderControlsArgs = {
    isWebcamOn: boolean;
    isRecording: boolean;
    isPreview: boolean;
    openCamera: () => void;
    closeCamera: () => void;
    start: () => void;
    stop: () => void;
    retake: () => void;
    download: () => void;
    status: string;
};
declare type RecordWebcamProps = {
    cssNamespace?: string;
    downloadFileName?: string;
    getStatus?(status: string): void;
    options?: RecorderOptions;
    recordingLength?: number;
    render?({}: RenderControlsArgs): void;
    controlLabels?: {
        CLOSE: string | BUTTON_LABELS.CLOSE;
        DOWNLOAD: string | BUTTON_LABELS.DOWNLOAD;
        OPEN: string | BUTTON_LABELS.OPEN;
        RETAKE: string | BUTTON_LABELS.RETAKE;
        START: string | BUTTON_LABELS.START;
        STOP: string | BUTTON_LABELS.STOP;
    };
};
declare type RecordWebcamState = {
    isPreview: boolean;
    isWebcamOn: boolean;
    isRecording: boolean;
    status: string;
};
export declare class RecordWebcam extends React.PureComponent<RecordWebcamProps, RecordWebcamState> {
    constructor(props: RecordWebcamProps);
    state: {
        isPreview: boolean;
        isWebcamOn: boolean;
        isRecording: boolean;
        status: CAMERA_STATUS;
    };
    recorder: Recorder;
    recorderOptions: {
        type: "video" | "audio";
        mimeType: "video/mp4" | "audio/webm" | "video/webm;codecs=vp9" | "video/webm;codecs=vp8" | "video/webm;codecs=h264";
        video: {
            minWidth: number;
            minHeight: number;
            maxWidth: number;
            maxHeight: number;
            minAspectRatio: number;
        };
    } | {
        type: "video" | "audio";
        mimeType: "video/mp4" | "audio/webm" | "video/webm;codecs=vp9" | "video/webm;codecs=vp8" | "video/webm;codecs=h264";
        video: {
            minWidth: number;
            minHeight: number;
            maxWidth: number;
            maxHeight: number;
            minAspectRatio: number;
        };
    };
    webcamRef: React.RefObject<HTMLVideoElement>;
    previewRef: React.RefObject<HTMLVideoElement>;
    static defaultProps: {
        cssNamespace: NAMESPACES;
    };
    componentDidUpdate(prevProps: RecordWebcamProps, prevState: RecordWebcamState): void;
    openCamera(): Promise<void>;
    closeCamera(): void;
    handleCloseCamera(): void;
    handleOpenCamera(): Promise<void>;
    handleStartRecording(): Promise<void>;
    handleStopRecording(): Promise<void>;
    handleRetakeRecording(): Promise<void>;
    download(): Promise<void>;
    handleError(error: Error): void;
    render(): JSX.Element;
}
export {};
